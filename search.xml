<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Thread Safety in cpp and Java</title>
      <link href="/2020/10/thread-synchronization-in-java-and-cpp/"/>
      <url>/2020/10/thread-synchronization-in-java-and-cpp/</url>
      
        <content type="html"><![CDATA[<p>The post exhibits two examples of thread synchronization (or communication) in <em>cpp</em> and <em>java</em>, with comments on the basic concepts.</p><h1 id="Thread-safe-Queue"><a href="#Thread-safe-Queue" class="headerlink" title="Thread-safe Queue"></a>Thread-safe Queue</h1><p>First thing comes the thread lock <code>std::mutex</code>. This lock cannot be copy or move to other objects thus it ensures only one thread shall own it.</p><p><code>std::lock_guard</code> and <code>std::unique_lock</code> are wrappers of <code>std::mutex</code> which provide more functionalities of thread lock.</p><p><code>std::condition_variable</code> controls whether a lock should be kept or released by the variants of <code>wait()</code> and <code>notify()</code> methods.</p><p>The templated ThreadQueue has a <code>std::queue&lt;T&gt;</code>, <code>std::mutex</code>, <code>std::condition_variable</code> and optionally functor <code>Predicate</code>, end condition <code>T</code>.</p><p>The basic workflow of is in a multithread environment,</p><p>thread that calls <code>push</code> or <code>pop</code> first will take the <code>std::mutex</code> by a wrapper and prevent other threads from doing that. At this point, all other thread will be waiting at line <code>std::lock_guard&lt;std::mutex&gt;</code> or  <code>std::unique_lock&lt;std::mutex&gt;</code>.</p><p>If the awaken thread is in <code>push</code>, it will execute to the end of the scope.</p><p>If the awaken thread is in <code>pop</code>, the story will be different. After it took the thread lock, the coming <code>condition_variable</code> won’t let it pass with the lock unless</p><ul><li>Received notification from other threads (by <code>notify()</code> or <code>notify_all()</code>)</li><li>(Optional) the condition is satisfied</li></ul><p>In the example we check whether the <code>std::queue</code> is empty, but there can also be other types of condition like <code>timeout</code>.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">Predicate</span><span class="token operator">=</span>std<span class="token operator">::</span>equal_to<span class="token operator">&lt;</span>T<span class="token operator">>></span><span class="token keyword">class</span> <span class="token class-name">ThreadQueue</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span><span class="token operator">:</span>    std<span class="token operator">::</span>queue<span class="token operator">&lt;</span>T<span class="token operator">></span> q<span class="token punctuation">;</span>    std<span class="token operator">::</span>mutex m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// only one thread can either uses push or pop.</span>    std<span class="token operator">::</span>condition_variable cv<span class="token punctuation">;</span>    T end_condition<span class="token punctuation">;</span>    Predicate pred<span class="token punctuation">;</span>  <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">ThreadQueue</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> ec<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">end_condition</span><span class="token punctuation">(</span>ec<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span>T<span class="token operator">&amp;&amp;</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>      std<span class="token operator">::</span>lock_guard<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>      q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span><span class="token punctuation">;</span>      cv<span class="token punctuation">.</span><span class="token function">notify_one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">bool</span> <span class="token function">pop</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// own mutex</span>      std<span class="token operator">::</span>unique_lock<span class="token operator">&lt;</span>std<span class="token operator">::</span>mutex<span class="token operator">></span> <span class="token function">lock</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/*        1. mutex released and execution suspended before awaking (being awakened)        2. Being awakened by notify_one() ( or notify_all() )        3. mutex reacquired, check the condition        4. If true -> move to next line, else -> go back to 1      */</span>      cv<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>lock<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// if is not necessary?</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        elem <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token function">pred</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> end_condition<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <code>pop</code> method returning <code>bool</code> instead of <code>T</code> has to merits.</p><ul><li>Avoid potential unnecessary copies (even compiler will optimize some of those implicitly)</li><li>Inform the caller of the method</li></ul><p>Like in the implementation, the <code>pop</code> method will return <code>false</code> if the popped element is the end_condition we defined at the time of construction. The program can be designed to be more flexible.</p><p>We also need to write the specialization of <code>std::equal_to&lt;T&gt;</code> if <code>T::operator==</code> is not defined.<br>The example using <code>std::string</code> looks like</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">namespace</span> std <span class="token punctuation">{</span>  <span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token operator">></span>  <span class="token keyword">struct</span> equal_to<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> lhs<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>rhs<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Print-Odd-Even-Number-in-Turn"><a href="#Print-Odd-Even-Number-in-Turn" class="headerlink" title="Print Odd-Even Number in Turn"></a>Print Odd-Even Number in Turn</h3><p>In <em>Java</em>, the thread lock is already defined in the <code>Object</code> class, as well as <code>notify()</code> and <code>wait()</code> method.</p><p>The scope that is expected to be thread safe is indicated by <em>Java</em> keyword <code>synchronized(Object obj)</code>.</p><p>Following code prints odd and even numbers by two threads in turn.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">PrintThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> rem<span class="token punctuation">;</span>  Number num<span class="token punctuation">;</span>  <span class="token function">PrintThread</span><span class="token punctuation">(</span>Number n<span class="token punctuation">,</span> <span class="token keyword">boolean</span> is_even<span class="token punctuation">)</span> <span class="token punctuation">{</span>    num <span class="token operator">=</span> n<span class="token punctuation">;</span>    rem <span class="token operator">=</span> is_even <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token punctuation">.</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">.</span>max<span class="token punctuation">)</span>       num<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>rem<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Number</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Number obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintThread</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrintThread</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> i<span class="token punctuation">,</span> max<span class="token punctuation">;</span>  <span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>    i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    max <span class="token operator">=</span> m<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> rem<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> rem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" -> "</span> <span class="token operator">+</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup Ubuntu Focal Fossa Desktop</title>
      <link href="/2020/09/setup-local-ubuntu-focal-fossa/"/>
      <url>/2020/09/setup-local-ubuntu-focal-fossa/</url>
      
        <content type="html"><![CDATA[<h3 id="mount-bitlocker-locked-partition"><a href="#mount-bitlocker-locked-partition" class="headerlink" title="mount bitlocker locked partition"></a>mount bitlocker locked partition</h3><ul><li><p>tool: <a href="https://github.com/Aorimn/dislocker" target="_blank" rel="noopener">dislocker</a></p></li><li><p>references: <a href="https://www.linuxuprising.com/2019/04/how-to-mount-bitlocker-encrypted.html" target="_blank" rel="noopener">ref1</a>, <a href="https://askubuntu.com/questions/617950/use-windows-bitlocker-encrypted-drive-on-ubuntu-14-04-lts" target="_blank" rel="noopener">ref2</a></p></li></ul><ol><li>Install <code>dislocker</code></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> dislocker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>Create two folders for decrypting and mounting partition</li></ol><p>e.g.</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /media/bitlocker<span class="token function">sudo</span> <span class="token function">mkdir</span> -p /media/bitmount<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>Identify partition</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">fdisk</span> -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>Decrypt</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> dislocker -r -V /dev/sdaX -p1536987-000000-000000-000000-000000-000000-000000-000000 -- /media/bitlocker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-r</code> means read-only. This option avoids many potential problems.</li><li><code>/dev/sdaX</code> shall be replaced by your partition</li><li><code>1536987-000000-000000-000000-000000-000000-000000-000000</code> shall be replaced by your recovery key.</li></ul><ol start="5"><li>Mount</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mount</span> -r -o loop /media/bitlocker/dislocker-file /media/bitmount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>(Optional) Make a script</li></ol><p>For convenience…</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token function">sudo</span> dislocker -r -V /dev/sdaX -p1536987-000000-000000-000000-000000-000000-000000-000000 -- /media/bitlocker<span class="token function">sudo</span> <span class="token function">mount</span> -r -o loop /media/bitlocker/dislocker-file /media/bitmount<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="enable-three-finger-swipe-to-switch-workplace"><a href="#enable-three-finger-swipe-to-switch-workplace" class="headerlink" title="enable three-finger swipe to switch workplace"></a>enable three-finger swipe to switch workplace</h3><ul><li><p>tool: <a href="https://github.com/bulletmark/libinput-gestures" target="_blank" rel="noopener">libinput-gestures</a></p></li><li><p>references: <a href="https://unix.stackexchange.com/questions/24330/how-can-i-turn-off-middle-mouse-button-paste-functionality-in-all-programs?answertab=votes#tab-top" target="_blank" rel="noopener">ref1</a></p></li></ul><ol><li>Install <code>libinput-gestures</code></li></ol><p>Follow the instructions in <code>github</code>.</p><ol start="2"><li>Configuration</li></ol><p>Enable animation when switching workplace in <em>~/.config/libinput-gestures.conf</em></p><pre class="line-numbers language-conf"><code class="language-conf"># gesture swipe up    _internal ws_upgesture swipe up    xdotool key super+Page_Down# gesture swipe down    _internal ws_downgesture swipe down    xdotool key super+Page_Up<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>note that <code>_internal ws_up</code> switches workplaces without animation. For more details please read the instructions in <code>github</code> or in the comments of the <em>.conf</em> file.</p><ol start="3"><li>Disable unwanted middle-mouse-click-copy behavior</li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> xbindkeys xsel xdotool<span class="token keyword">echo</span> -e <span class="token string">'"echo -n | xsel -n -i; pkill xbindkeys; xdotool click 2; xbindkeys"\nb:2 + Release'</span> <span class="token operator">>></span> ~/.xbindkeysrc<span class="token comment" spellcheck="true"># reload</span>xbindkeys -p<span class="token comment" spellcheck="true"># start</span>xbindkeys<span class="token comment" spellcheck="true"># stop</span><span class="token function">pkill</span> xbindkeys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>See <a href="https://unix.stackexchange.com/questions/24330/how-can-i-turn-off-middle-mouse-button-paste-functionality-in-all-programs?answertab=votes#tab-top" target="_blank" rel="noopener">ref1</a> for details.</p><h3 id="enable-shortcut-for-deepwine-applications"><a href="#enable-shortcut-for-deepwine-applications" class="headerlink" title="enable shortcut for deepwine applications"></a>enable shortcut for deepwine applications</h3><ul><li>tool: <code>xdottool</code></li><li>reference: <a href="https://zhuanlan.zhihu.com/p/144286142" target="_blank" rel="noopener">ref1</a></li></ul><ol><li>Install <code>xdottool</code></li></ol><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> --no-install-recommends xdotool<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>Create script</li></ol><p>Example in reference named as <em>open_wechat.sh</em></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>xdotool key --window <span class="token variable"><span class="token variable">$(</span>xdotool search --limit 1 --all --pid <span class="token punctuation">$(</span>pgrep WeChat.exe<span class="token variable">)</span></span><span class="token punctuation">)</span> <span class="token string">"ctrl+alt+W"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>make the script executable by <code>chmod +x open_wechat.sh</code></p><ol start="3"><li>Set the shortcut <code>Settings</code> -&gt; <code>Keyboard Shortcuts</code></li></ol><h3 id="onedrive"><a href="#onedrive" class="headerlink" title="onedrive"></a>onedrive</h3><ul><li>tool: <a href="https://github.com/abraunegg/onedrive" target="_blank" rel="noopener">OneDrive Client for Linux</a></li><li>references: <a href="https://github.com/abraunegg/onedrive/blob/master/docs/INSTALL.md" target="_blank" rel="noopener">installation</a>, <a href="https://github.com/abraunegg/onedrive/blob/master/docs/USAGE.md" target="_blank" rel="noopener">configuration</a></li></ul><p>It is recommended to run <code>onedrive</code> as a service and enable it at boot.</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Environments </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clustered Standard Errors in Linear Regression Model</title>
      <link href="/2020/08/algorithm-clustered-standard-errors-of-linear-regression/"/>
      <url>/2020/08/algorithm-clustered-standard-errors-of-linear-regression/</url>
      
        <content type="html"><![CDATA[<p>Source code can be found <a href="https://github.com/yuhenghuang/Rcpp/blob/master/ClusteredSE.cpp" target="_blank" rel="noopener">here</a>.</p><h3 id="Problem-Setting"><a href="#Problem-Setting" class="headerlink" title="Problem Setting"></a>Problem Setting</h3><p>Consider a model of</p><p>$$ y_i = x_i’\beta + \epsilon_i $$</p><p>, where $y_i$ and $’\epsilon_i$ are scalars, $x_i$ and $\beta$ are both $k\times1$ vectors for $i = 1, 2, 3, …, n$.</p><p>Other assumptions include</p><ul><li><p>$\mathbb{E}\left[\epsilon_i | x_i\right] = 0$</p></li><li><p>$\mathcal{Var}\left(\epsilon_i\right) = \sigma^2$</p></li><li><p>$\mathcal{Cov}\left(\epsilon_i, \epsilon_j\right) = 0$ for $i \neq j$</p></li></ul><p>Actually the previous assumptions indicate the <em>i.i.d</em> property of the error term $\epsilon_i$.</p><p>All those assumptions are way too strong for real world data, thus we need to relax them to a certain extent. Introduce a new variable ${g_i}^n_{i=1}$ that indicates the group of observations.</p><p>New assumptions are</p><ul><li><p>$\mathbb{E}\left[\epsilon_i | x_i\right] = 0$</p></li><li><p>$\mathcal{Var}\left(\epsilon_i\right) = \sigma_i^2$</p></li><li><p>$\mathcal{Cov}\left(\epsilon_i, \epsilon_j\right) = 0$ for $g_i \neq g_j$</p></li></ul><p>The former homoskedasticity is now heteroscedasticity, and correlation of error terms within group is allowed.</p><h3 id="Derivation-and-Inference"><a href="#Derivation-and-Inference" class="headerlink" title="Derivation and Inference"></a>Derivation and Inference</h3><p>For convenience, a matrix formula of the problem is presented as </p><p>$$ \underset{n \times 1}{Y} = \underset{n \times k}{X}\beta + \underset{n \times 1}{\epsilon} $$ (1)</p><p>with $\underset{n \times 1}{G}$.</p><p>As the assumptions do not affect the result of OLS estimator, the estimate of $\beta$ is</p><p>$$\hat{\beta} = (X’X)^{-1}X’Y$$ (2)</p><p>and the estimate of $\epsilon$ is</p><p>$$e = Y - X\hat{\beta}$$ (3)</p><p>The variance of $\hat{\beta}$ can be shown to be</p><p>$$\mathcal{Var}(\hat{\beta}) = (X’X)^{-1}X’\epsilon \epsilon’ X(X’X)^{-1}$$</p><p>Using the assumption $\mathbb{E}\left[\epsilon_i | x_i\right] = 0$, we can derive that $\mathcal{Var}(\epsilon) = \epsilon \epsilon’$. Denote $\mathcal{Var}(\epsilon)$ as $\underset{n \times n}{\Omega}$,</p><p>$$\mathcal{Var}(\hat{\beta}) = (X’X)^{-1}X’ \Omega X(X’X)^{-1}$$</p><p>Applying the rest of assumption we can obtain</p><p>$$\mathcal{Var}(\hat{\beta}) = \left(X’X\right)^{-1}\sum\limits^g\left[X_g’\epsilon_g\epsilon_g’X_g\right]\left(X’X\right)^{-1}$$</p><p>, where $\underset{n_g \times k}{X_g}$ and $\underset{n_g \times 1}{\epsilon_g}$ are the $X$ and $\epsilon$ in group $g$, and $n_g$ is the sample size of the group.</p><p>Since $\epsilon$ is unknown to us, in the computation it is replaced by its estimate $e$.</p><h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><ol><li><p>Precompute $(X’X)^{-1}$</p></li><li><p>Use bucket sort to construct $X_g$ and $\epsilon_g$ correctly in $O(2n)$ time.</p><ul><li>the first loop is to determine $n_g$ for the purpose of allocating places for $X_g$ and $\epsilon_g$</li><li>the second loop put $X_g$ and $\epsilon_g$ in the allocated place correctly in terms of value and order.</li></ul></li><li><p>Compute $\sum\limits^g\left[X_g’\epsilon_g\epsilon_g’X_g\right]$</p></li><li><p>Compute $\mathcal{Var}(\hat{\beta})$</p></li></ol><p>For more information, please see the source code link in the beginning of the post.</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mathematics </tag>
            
            <tag> Armadillo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>An Object-Oriented List in R</title>
      <link href="/2020/08/r-object-oriented-list/"/>
      <url>/2020/08/r-object-oriented-list/</url>
      
        <content type="html"><![CDATA[<p>In <em>R</em>, basically operations follow the principle of so-called <strong>copy-on-modify semantics</strong>. That means the operations modify the copy of a variable/object instead of the variable/object itself. The feature trades convenience for performance. In practice, most of <em>R</em> users are from disciplines other than computer science, and it’s less likely they prioritize performance over convenience. As a result we could say this is for the benefit of the majority of the community.</p><p>While in my opinion, especially when Data Science is being popular year by year, the role that <em>R</em> plays as one of the two major languages for DS (the other is <em>Python</em>) has been shifting from a statistical tool to a general purpose programming language. In <em>Java</em> and <em>Python</em>, an Object passed to a function as an argument will be treated as reference without implicitly copying it, whereas <em>R</em> copies most types of its objects in this case, following the <strong>copy-on-modify semantics</strong>.</p><p>There are some newly emerged OO system that works under <strong>reference semantics</strong> just like other mainstream languages. The <code>R6class</code> and <code>RefClass</code> are both good choices in general. But they are out of the options for the purpose of the post because they does not support overriding <code>$</code>, which is one of the most important operator for a list in <em>R</em>. For <code>R6class</code> and <code>RefClass</code>, <code>$</code> is like the <code>.</code> in <em>Java</em> and <em>Python</em> used after an object to access the methods of the object.</p><p>Given the two main requirements of this new OO list</p><ul><li>The feature of <strong>reference semantics</strong></li><li>Able to overriding <code>$</code> and of course <code>[[</code></li></ul><p>The choice in the post is <code>R.oo</code>.</p><h3 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h3><p>Assuming the class name of the list is <code>List</code>, the constructor is like</p><pre class="line-numbers language-r"><code class="language-r">library<span class="token punctuation">(</span>R.oo<span class="token punctuation">)</span>library<span class="token punctuation">(</span>rlang<span class="token punctuation">)</span>setConstructorS3<span class="token punctuation">(</span><span class="token string">"List"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token ellipsis">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  extend<span class="token punctuation">(</span>    Object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token string">"List"</span><span class="token punctuation">,</span>    .ls <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token ellipsis">...</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Override-and"><a href="#Override-and" class="headerlink" title="Override $ and [["></a>Override <code>$</code> and <code>[[</code></h3><p>My suggestion is to override <code>[[</code> first and call it by <code>$</code>. Because the argument of <code>[[</code> is <code>character</code> while <code>$</code> is <code>expression</code>, there are cases we cannot avoid using <code>eval()</code> in the method. That part involves <a href="https://adv-r.hadley.nz/metaprogramming.html" target="_blank" rel="noopener">meta-programming</a> which is not a familiar field for non-developers.</p><p>The only thing we do inside the <code>$</code> is transform the input argument <code>name</code> from <code>expression</code> to <code>string</code>, then call <code>[[</code> to do the rest of the job. The example only shows one way to do the transformation.</p><pre class="line-numbers language-r"><code class="language-r">setMethodS3<span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"List"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  key <span class="token operator">&lt;-</span> as_string<span class="token punctuation">(</span>ensym<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>  return<span class="token punctuation">(</span>this<span class="token punctuation">[</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Inside the <code>[[</code> there are two cases, accessing the members of the object or accessing the inner <code>list</code>. As the Object itself can be treated like an environment, the logic is searching for the variable in the object first. If it is a member of the object, return it. Otherwise, return the element in the list.</p><pre class="line-numbers language-r"><code class="language-r">setMethodS3<span class="token punctuation">(</span><span class="token string">"[["</span><span class="token punctuation">,</span> <span class="token string">"List"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  envir <span class="token operator">=</span> attr<span class="token punctuation">(</span>this<span class="token punctuation">,</span> <span class="token string">".env"</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>exists<span class="token punctuation">(</span>name<span class="token punctuation">,</span> envir <span class="token operator">=</span> envir<span class="token punctuation">,</span> inherits <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    return<span class="token punctuation">(</span>get<span class="token punctuation">(</span>name<span class="token punctuation">,</span> envir <span class="token operator">=</span> envir<span class="token punctuation">,</span> inherits <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    return<span class="token punctuation">(</span>this<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">".ls"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span> exact<span class="token operator">=</span><span class="token boolean">TRUE</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The code explains itself fairly well except this line </p><pre class="line-numbers language-r"><code class="language-r">    <span class="token comment" spellcheck="true"># ---</span>    return<span class="token punctuation">(</span>this<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">".ls"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>.The functional form of this line is actually</p><pre class="line-numbers language-r"><code class="language-r">`<span class="token punctuation">[</span><span class="token punctuation">[</span>`<span class="token punctuation">(</span>`<span class="token punctuation">[</span><span class="token punctuation">[</span>.List`<span class="token punctuation">(</span>this<span class="token punctuation">,</span> <span class="token string">".ls"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>, which means the first case of <code>if else</code> is already being used in this function.</p><h3 id="Override-lt-and-lt"><a href="#Override-lt-and-lt" class="headerlink" title="Override $&lt;- and [[&lt;-"></a>Override <code>$&lt;-</code> and <code>[[&lt;-</code></h3><p>A hint here is that in the <a href="https://github.com/HenrikBengtsson/R.oo/blob/develop/R/050.Object.R#L1825" target="_blank" rel="noopener">source code</a> of <code>R.oo</code>, the <code>[[&lt;-</code> of the base object <code>Object()</code> has only one line.</p><pre class="line-numbers language-r"><code class="language-r">setMethodS3<span class="token punctuation">(</span><span class="token string">"[[&lt;-"</span><span class="token punctuation">,</span> <span class="token string">"Object"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  do.call<span class="token punctuation">(</span>`<span class="token operator">$</span><span class="token operator">&lt;-</span>`<span class="token punctuation">,</span> args <span class="token operator">=</span> list<span class="token punctuation">(</span>this<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>That is to say we only need to override <code>$&lt;-</code> to accomplish the assignment functionality of <code>list</code>.</p><pre class="line-numbers language-r"><code class="language-r">setMethodS3<span class="token punctuation">(</span><span class="token string">"$&lt;-"</span><span class="token punctuation">,</span> <span class="token string">"List"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  key <span class="token operator">&lt;-</span> as_string<span class="token punctuation">(</span>ensym<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>  envir <span class="token operator">&lt;-</span> attr<span class="token punctuation">(</span>this<span class="token punctuation">,</span> <span class="token string">".env"</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>exists<span class="token punctuation">(</span>key<span class="token punctuation">,</span> envir <span class="token operator">=</span> envir<span class="token punctuation">,</span> inherits <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    assign<span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> envir <span class="token operator">=</span> envir<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    this<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">".ls"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;-</span> value  <span class="token punctuation">}</span>  return<span class="token punctuation">(</span>invisible<span class="token punctuation">(</span>this<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The logic of the <code>if else</code> is actually the same as <code>[[</code> in previous section. In the same way we rewrite the line of assignment to <code>list</code> into functional form.</p><pre class="line-numbers language-r"><code class="language-r">    <span class="token comment" spellcheck="true"># ---</span>    this<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">".ls"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;-</span> value    <span class="token comment" spellcheck="true"># ---</span>    <span class="token comment" spellcheck="true"># identical to</span>    <span class="token comment" spellcheck="true"># ---</span>    `<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">&lt;-</span>.List`<span class="token punctuation">(</span>this<span class="token punctuation">,</span>                 <span class="token string">".ls"</span><span class="token punctuation">,</span>                 `<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">&lt;-</span>`<span class="token punctuation">(</span>`<span class="token punctuation">[</span><span class="token punctuation">[</span>.List`<span class="token punctuation">(</span>this<span class="token punctuation">,</span> <span class="token string">".ls"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        key<span class="token punctuation">,</span>                        value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># ---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Unexpectedly, there are two assignments rather than one. This is due to the <strong>copy-on-modify semantics</strong> feature of <code>list</code>, which does not allow in-place modification.</p><h3 id="Autocomplete"><a href="#Autocomplete" class="headerlink" title="Autocomplete"></a>Autocomplete</h3><p>To let the autocomplete triggered by <code>$</code> work just like <code>list</code>, we need one (or two) more method(s).</p><pre class="line-numbers language-r"><code class="language-r">setMethodS3<span class="token punctuation">(</span><span class="token string">".DollarNames"</span><span class="token punctuation">,</span> <span class="token string">"List"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span> pattern<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token ellipsis">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  grep<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> names<span class="token punctuation">(</span>this<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">".ls"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>setMethodS3<span class="token punctuation">(</span><span class="token string">"names"</span><span class="token punctuation">,</span> <span class="token string">"List"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span> <span class="token ellipsis">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  return<span class="token punctuation">(</span>names<span class="token punctuation">(</span>this<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">".ls"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Actually the second function is sufficient to do the job in RStudio, and the first method is designed for <em>R</em> GUI. By the time you’re reading the post, the first method should have already been supported by source editor of RStudio.</p><h3 id="Embed-API-in-and"><a href="#Embed-API-in-and" class="headerlink" title="Embed API in $ and [["></a>Embed API in <code>$</code> and <code>[[</code></h3><p>A good practice is encapsulating <code>connection</code> or <code>access_key</code> in the Object and call this <code>List</code> to retrieve the information implicitly. And as this <code>List</code> uses <strong>reference semantics</strong>, not only the modifications made inside/outside of a function will be reflected, but also <em>R</em> will not copy anything when passing it as an argument. This feature is particularly helpful if the <code>connection</code> or anything inside the object shall not be copied.</p><p>Here is a template for this usage. <code>API_FUNCTION</code> can be arbitrary function.</p><pre class="line-numbers language-r"><code class="language-r">setMethodS3<span class="token punctuation">(</span><span class="token string">"[["</span><span class="token punctuation">,</span> <span class="token string">"List"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>this<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  envir <span class="token operator">=</span> attr<span class="token punctuation">(</span>this<span class="token punctuation">,</span> <span class="token string">".env"</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>exists<span class="token punctuation">(</span>name<span class="token punctuation">,</span> envir <span class="token operator">=</span> envir<span class="token punctuation">,</span> inherits <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    return<span class="token punctuation">(</span>get<span class="token punctuation">(</span>name<span class="token punctuation">,</span> envir <span class="token operator">=</span> envir<span class="token punctuation">,</span> inherits <span class="token operator">=</span> <span class="token boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is.null<span class="token punctuation">(</span>this<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">".ls"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true"># ---</span>      this<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">".ls"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> API_FUNCTION<span class="token punctuation">(</span>name<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># ---</span>    <span class="token punctuation">}</span>    return<span class="token punctuation">(</span>this<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">".ls"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span> exact<span class="token operator">=</span><span class="token boolean">TRUE</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object-Oriented </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mathematic Derivation of An Approach of Computing Multivariate Normal Density</title>
      <link href="/2020/07/algorithm-an-efficient-approach-of-computing-multivariate-normal-density/"/>
      <url>/2020/07/algorithm-an-efficient-approach-of-computing-multivariate-normal-density/</url>
      
        <content type="html"><![CDATA[<p>This post gives mathematic explanations for the algorithm on the <a href="https://gallery.rcpp.org/articles/dmvnorm_arma/" target="_blank" rel="noopener">Rcpp example site</a>.</p><p>The density function for $\underset{k\times1}{X} \sim N(\mu, \Sigma)$ is<br>$$f(x) = \frac{\exp(-\frac{1}{2}(x-\mu)^T\Sigma^{-1}(x-\mu))}{\sqrt{(2\pi)^k|\Sigma|}}$$</p><p>We follow the algorithm in the <a href="https://github.com/yuhenghuang/Rcpp/blob/master/Multivariate_Normal_Density.cpp" target="_blank" rel="noopener">.cpp</a> file to compute the density of $\underset{n \times k}{x}$ for each row and return their density in a vector of size $n$ numerically.</p><p>To simplify the computation, instead of the original form, we choose to compute $\log\left(f\left(x\right)\right)$.</p><p>$$\log\left(f\left(x\right)\right) =<br>-\frac{1}{2}(\Sigma^{-\frac{1}{2}}(x-\mu))^T(\Sigma^{-\frac{1}{2}}(x-\mu))<br>-\frac{k}{2}\log(2\pi) + \frac{1}{2}log(|\Sigma|^{-1})$$</p><p>, where $\Sigma^{-\frac{1}{2}} = L$ such that $\Sigma = L^TL$. <sup>*this definition differs from <a href="https://en.wikipedia.org/wiki/Cholesky_decomposition" target="_blank" rel="noopener">Wikipedia</a> whereas follows <a href="http://arma.sourceforge.net/docs.html#chol" target="_blank" rel="noopener">Armadillo</a>, thus $L$ is an upper triangular matrix here.</sup></p><h3 id="Compute-L-1-or-Sigma-frac-1-2"><a href="#Compute-L-1-or-Sigma-frac-1-2" class="headerlink" title="Compute $L^{-1}$, or $\Sigma^{-\frac{1}{2}}$"></a>Compute $L^{-1}$, or $\Sigma^{-\frac{1}{2}}$</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">const</span> arma<span class="token operator">::</span>mat rooti <span class="token operator">=</span> arma<span class="token operator">::</span><span class="token function">trimatu</span><span class="token punctuation">(</span>arma<span class="token operator">::</span><span class="token function">chol</span><span class="token punctuation">(</span>sigma<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>the variable name <code>rooti</code> exactly comes from <strong>inverse</strong> and <strong>root square</strong> of the variance-covariance matrix $\Sigma$.</p><h3 id="Compute-frac-1-2-log-Sigma-1-and-frac-k-2-log-2-pi"><a href="#Compute-frac-1-2-log-Sigma-1-and-frac-k-2-log-2-pi" class="headerlink" title="Compute $\frac{1}{2}\log(|\Sigma|^{-1})$ and $-\frac{k}{2}\log(2\pi)$"></a>Compute $\frac{1}{2}\log(|\Sigma|^{-1})$ and $-\frac{k}{2}\log(2\pi)$</h3><p>$$|\Sigma|^{-1} = |\Sigma^{-1}| = |(L^TL)^{-1}| = |L^{-1}||(L^T)^{-1}|$$</p><p>As $L$ is a triangular matrix, $|L^{-1}|\equiv|(L^T)^{-1}|$ and its determinant is the product of its diagonal elements.</p><p>The second constant term only consists of scalars.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">double</span> log2pi <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">.</span> <span class="token operator">*</span> M_PI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">using</span> arma<span class="token operator">::</span>uword<span class="token punctuation">;</span><span class="token keyword">const</span> uword n <span class="token operator">=</span> x<span class="token punctuation">.</span>n_rows<span class="token punctuation">,</span> k <span class="token operator">=</span> x<span class="token punctuation">.</span>n_cols<span class="token punctuation">;</span>arma<span class="token operator">::</span>vec <span class="token function">out</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> rootisum <span class="token operator">=</span> arma<span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token function">log</span><span class="token punctuation">(</span>rooti<span class="token punctuation">.</span><span class="token function">diag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             constants <span class="token operator">=</span> <span class="token operator">-</span> <span class="token keyword">double</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">.</span> <span class="token operator">*</span> log2pi<span class="token punctuation">,</span>             other_terms <span class="token operator">=</span> rootisum <span class="token operator">+</span> constants<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="The-first-term"><a href="#The-first-term" class="headerlink" title="The first term"></a>The first term</h3><ul><li>Compute $z = \underset{1 \times k}{x} - \mu$</li><li>Update $z := zL^{-1}$</li><li>Compute $-\frac{1}{2}zz^T$</li></ul><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">inplace_trimat_mul</span><span class="token punctuation">(</span>arma<span class="token operator">::</span>rowvec <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">const</span> arma<span class="token operator">::</span>mat <span class="token operator">&amp;</span>trimat<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> arma<span class="token operator">::</span>uword n <span class="token operator">=</span> trimat<span class="token punctuation">.</span>n_cols<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// be wary of unsigned int...</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>arma<span class="token operator">::</span>uword j<span class="token operator">=</span>n<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>arma<span class="token operator">::</span>uword i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>j<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>      temp <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">trimat</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>arma<span class="token operator">::</span>rowvec z<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>uword i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>  z <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">row</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> mu<span class="token punctuation">;</span>  <span class="token function">inplace_trimat_mul</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> rooti<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">out</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> other_terms <span class="token operator">-</span> <span class="token number">0.5</span> <span class="token operator">*</span> arma<span class="token operator">::</span><span class="token function">dot</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mathematics </tag>
            
            <tag> Armadillo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Working with R session interactively in Python</title>
      <link href="/2020/07/python-interact-with-r-session-through-stdio/"/>
      <url>/2020/07/python-interact-with-r-session-through-stdio/</url>
      
        <content type="html"><![CDATA[<p>This post introduces a feasible way to work with <em>R</em> session interactively in <em>Python</em> with the help of <code>Subprocess</code>. Through <code>PIPE</code> of <code>stdin</code> and <code>stdout</code>, data and commands can be passed between the two process.</p><h3 id="Toy-Example"><a href="#Toy-Example" class="headerlink" title="Toy Example"></a>Toy Example</h3><p>Input an integer in <em>Python</em> and return that integer + 1 from <em>R</em>.</p><pre class="line-numbers language-r"><code class="language-r"><span class="token comment" spellcheck="true">#!/usr/bin/env Rscript</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  var <span class="token operator">=</span> readLines<span class="token punctuation">(</span><span class="token string">"stdin"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  Sys.sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  write<span class="token punctuation">(</span>as.integer<span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> stdout<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token keyword">from</span> subprocess <span class="token keyword">import</span> Popen<span class="token punctuation">,</span> PIPErsession <span class="token operator">=</span> Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Rscript'</span><span class="token punctuation">,</span> <span class="token string">'/path/to/script.R'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stdin<span class="token operator">=</span>PIPE<span class="token punctuation">,</span> stdout<span class="token operator">=</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>PIPE<span class="token punctuation">)</span>rsession<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>write<span class="token punctuation">(</span>b<span class="token string">'20\n'</span><span class="token punctuation">)</span>rsession<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rsession<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Explanations line by line:</p><ol><li><p><em>R</em></p><ul><li><code>readLines(&quot;stdin&quot;, 1)</code><ul><li>read the input from python.</li><li>as R handles scalar and vector of length 1 softly, no other operations are needed.</li><li><code>readline()</code> does not seem to work this way.</li></ul></li><li><code>write(as.integer(var)+1, stdout())</code><ul><li>write strings in R to <code>stdout()</code>.</li><li>implicitly transform input to <em>bytes</em>.</li></ul></li></ul></li><li><p><em>Python</em></p><ul><li><code>rsession = Popen([&#39;Rscript&#39;, &#39;/path/to/script.R&#39;], stdin=PIPE, stdout=PIPE, stderr=PIPE)</code><ul><li>start <em>R</em> subprocess.</li><li>connect to the subprocess by <code>stdin</code>, <code>stdout</code> and <code>stderr</code>(optional) through <em>PIPE</em>.</li></ul></li><li><code>rsession.stdin.write(b&#39;20\n&#39;)</code><ul><li>only accept <em>bytes</em> input.</li><li>ends with <code>&#39;\n&#39;</code> is a MUST.</li></ul></li><li><code>rsession.stdin.flush()</code><ul><li>flush the contents in <code>stdin</code></li></ul></li><li><code>rsession.stdout.readline()</code><ul><li>read the next <strong>ONE</strong> line</li><li>returned type is <em>bytes</em> as well</li></ul></li></ul></li></ol><h3 id="Elaborate-Example"><a href="#Elaborate-Example" class="headerlink" title="Elaborate Example"></a>Elaborate Example</h3><p>Pass arguments(parameters) to <em>R</em> session in <em>Python</em> and retrieve the resulting data frame.</p><pre class="line-numbers language-r"><code class="language-r"><span class="token comment" spellcheck="true">#!/usr/bin/env Rscript</span>library<span class="token punctuation">(</span>tidyverse<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># For windows users, this line might solve the problem with non-English locale</span><span class="token comment" spellcheck="true"># the stem of the potential problem is that windows does not seem to support locales like 'ja_JP.UTF-8'</span><span class="token comment" spellcheck="true"># Sys.setlocale(locale = "english")</span><span class="token comment" spellcheck="true"># Toy dataframe</span>df_raw <span class="token operator">&lt;-</span> tibble<span class="token punctuation">(</span>  x <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">'いろは'</span><span class="token punctuation">,</span><span class="token string">'やちよ'</span><span class="token punctuation">,</span><span class="token string">'鶴乃'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  y <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>  z <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">'うい'</span><span class="token punctuation">,</span> <span class="token string">'みふゆ'</span><span class="token punctuation">,</span> <span class="token string">'万々歳'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># function to output the dataframe to stdout</span>write_df <span class="token operator">&lt;-</span> <span class="token keyword">function</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true"># Begin Of DataFrame, works as an indicator for following dataframe lines</span>  write<span class="token punctuation">(</span><span class="token string">"BODF"</span><span class="token punctuation">,</span> stdout<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  df <span class="token percent-operator operator">%>%</span>    format_tsv<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>    enc2utf8<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>    write<span class="token punctuation">(</span>.<span class="token punctuation">,</span> stdout<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># act like interactively</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">TRUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  arg_input <span class="token operator">=</span> readLines<span class="token punctuation">(</span><span class="token string">"stdin"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># filter rows</span>  df_temp <span class="token operator">&lt;-</span> df_raw <span class="token percent-operator operator">%>%</span>    filter<span class="token punctuation">(</span>x<span class="token operator">==</span>arg_input<span class="token punctuation">)</span>  write_df<span class="token punctuation">(</span>df_temp<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> subprocess <span class="token keyword">import</span> Popen<span class="token punctuation">,</span> PIPE<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO<span class="token keyword">def</span> <span class="token function">read_df</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> sess<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token triple-quoted-string string">'''  Arguments:    word: can be arbitrary parameters passed to R session through stdin pipe    sess: R session running as a subprocess  '''</span>  word <span class="token operator">+=</span> <span class="token string">'\n'</span> <span class="token comment" spellcheck="true"># add end of line </span>  sess<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>write<span class="token punctuation">(</span>word<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># to bytes</span>  sess<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># skip irrelevant lines</span>  <span class="token comment" spellcheck="true"># b'BODF\r\n' is defined in the R script</span>  line <span class="token operator">=</span> <span class="token string">'initializer'</span>  <span class="token keyword">while</span> line<span class="token operator">!=</span>b<span class="token string">'BODF\n'</span><span class="token punctuation">:</span>    line <span class="token operator">=</span> sess<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># write all lines of dataframe to a buffer</span>  <span class="token comment" spellcheck="true"># data frame in lines of stdout from R session shall end with b'\r\n'</span>  buffer <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> line<span class="token operator">!=</span>b<span class="token string">'\n'</span><span class="token punctuation">:</span>    line <span class="token operator">=</span> sess<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    buffer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># reset the pointer of the buffer and read</span>  buffer<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> df<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>  rsession <span class="token operator">=</span> Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Rscript'</span><span class="token punctuation">,</span> <span class="token string">'/path/to/script.R'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stdin<span class="token operator">=</span>PIPE<span class="token punctuation">,</span> stdout<span class="token operator">=</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>PIPE<span class="token punctuation">)</span>  <span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>read_df<span class="token punctuation">(</span><span class="token string">'いろは'</span><span class="token punctuation">,</span> rsession<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>read_df<span class="token punctuation">(</span><span class="token string">'やちよ'</span><span class="token punctuation">,</span> rsession<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token keyword">finally</span><span class="token punctuation">:</span>    rsession<span class="token punctuation">.</span>kill<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p><em>R</em></p><ul><li><code>format_tsv()</code><ul><li>transform the data frame to a string</li><li>other similar functions can be found in <a href="https://www.rdocumentation.org/packages/readr/versions/1.3.1/topics/format_delim" target="_blank" rel="noopener">official documents</a></li></ul></li><li><code>enc2utf8()</code><ul><li>change encoding of the string to <code>utf-8</code></li><li>this line might be necessary under certain conditions</li></ul></li></ul></li><li><p><em>Python</em></p><ul><li><code>buffer = BytesIO()</code><ul><li>create a file-like object to save the <em>bytes</em> input from <code>stdout</code></li></ul></li><li><code>buffer.write(line)</code><ul><li>save <code>stdout</code> line by line to buffer</li></ul></li><li><code>buffer.seek(0)</code><ul><li>reset the pointer to the beginning of buffer</li><li>otherwise nothing can be read as the pointer is unidirectional</li></ul></li><li><code>df = pd.read_csv(buffer, sep=&#39;\t&#39;, encoding=&#39;utf-8&#39;)</code><ul><li><code>sep=&#39;\t&#39;</code> is corresponding to <code>format_tsv()</code> in <em>R</em></li><li><code>encoding=&#39;utf-8&#39;</code> is necessary.</li></ul></li></ul></li></ol><h3 id="Monitor-stdout-from-R-by-Thread"><a href="#Monitor-stdout-from-R-by-Thread" class="headerlink" title="Monitor stdout from R by Thread"></a>Monitor <code>stdout</code> from R by <code>Thread</code></h3><p>To avoid the <em>deadlock</em> of the main thread, using another thread to listen to <code>stdout</code> is a good solution</p><p><em>R</em> code does not change from previous section.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> subprocess <span class="token keyword">import</span> Popen<span class="token punctuation">,</span> PIPE<span class="token punctuation">,</span> call<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO<span class="token keyword">def</span> <span class="token function">read_stdout</span><span class="token punctuation">(</span>sess<span class="token punctuation">)</span><span class="token punctuation">:</span>  flag_df <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token keyword">for</span> line <span class="token keyword">in</span> iter<span class="token punctuation">(</span>sess<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>readline<span class="token punctuation">,</span> b<span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> flag_df<span class="token punctuation">:</span>      <span class="token keyword">if</span> line<span class="token operator">==</span>b<span class="token string">'\n'</span><span class="token punctuation">:</span>        buffer<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>df<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>        flag_df <span class="token operator">=</span> <span class="token boolean">False</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>        buffer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>    <span class="token keyword">elif</span> line<span class="token operator">==</span>b<span class="token string">'BODF\n'</span><span class="token punctuation">:</span>      flag_df <span class="token operator">=</span> <span class="token boolean">True</span>      buffer <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">read_df</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> sess<span class="token punctuation">)</span><span class="token punctuation">:</span>  word <span class="token operator">+=</span> <span class="token string">'\n'</span> <span class="token comment" spellcheck="true"># add end of line </span>  sess<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>write<span class="token punctuation">(</span>word<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># to bytes</span>  sess<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>  df <span class="token operator">=</span> queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> df<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>  rsession <span class="token operator">=</span> Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Rscript'</span><span class="token punctuation">,</span> <span class="token string">'/path/to/script.R'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stdin<span class="token operator">=</span>PIPE<span class="token punctuation">,</span> stdout<span class="token operator">=</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>PIPE<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># global queue</span>  queue <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># start thread to listen to rsession.stdout</span>  t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>read_stdout<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>rsession<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>  t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>read_df<span class="token punctuation">(</span><span class="token string">'いろは'</span><span class="token punctuation">,</span> rsession<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>read_df<span class="token punctuation">(</span><span class="token string">'やちよ'</span><span class="token punctuation">,</span> rsession<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token keyword">finally</span><span class="token punctuation">:</span>    rsession<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># On windows try this.</span>    <span class="token comment" spellcheck="true"># call(['taskkill', '/F', '/T', '/PID', str(rsession.pid)])</span>  <span class="token comment" spellcheck="true"># can only join the thread when rsession is terminated</span>  <span class="token comment" spellcheck="true"># as stdout.readline() only returns b'' when the process is terminated.</span>  t<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This enables more flexible control over the <code>stdout</code> stream and abstract the functionalities of each part better. Though more lines to handle exceptions are needed, the basic flow might be a good practice.</p><h3 id="Class-version-of-the-previous-approach-using-Thread"><a href="#Class-version-of-the-previous-approach-using-Thread" class="headerlink" title="Class version of the previous approach using Thread"></a>Class version of the previous approach using <code>Thread</code></h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python3</span><span class="token keyword">from</span> subprocess <span class="token keyword">import</span> Popen<span class="token punctuation">,</span> PIPE<span class="token punctuation">,</span> call<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue<span class="token punctuation">,</span> Empty<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO<span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token comment" spellcheck="true"># if you are using Jupyter to test</span><span class="token keyword">from</span> IPython<span class="token punctuation">.</span>display <span class="token keyword">import</span> display<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">def</span> <span class="token function">threaded</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>  @wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    thread <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>func<span class="token punctuation">,</span> args<span class="token operator">=</span>args<span class="token punctuation">,</span> kwargs<span class="token operator">=</span>kwargs<span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> thread  <span class="token keyword">return</span> wrapper<span class="token keyword">class</span> <span class="token class-name">Rsession</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>sess <span class="token operator">=</span> Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Rscript'</span><span class="token punctuation">,</span> path<span class="token punctuation">]</span><span class="token punctuation">,</span> stdin<span class="token operator">=</span>PIPE<span class="token punctuation">,</span> stdout<span class="token operator">=</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>PIPE<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>queue <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># start thread</span>    self<span class="token punctuation">.</span>thread <span class="token operator">=</span> self<span class="token punctuation">.</span>read_stdout<span class="token punctuation">(</span><span class="token punctuation">)</span>  @threaded  <span class="token keyword">def</span> <span class="token function">read_stdout</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    flag_df <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> iter<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sess<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>readline<span class="token punctuation">,</span> b<span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token keyword">if</span> flag_df<span class="token punctuation">:</span>        <span class="token keyword">if</span> line<span class="token operator">==</span>b<span class="token string">'\n'</span><span class="token punctuation">:</span>          buffer<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>          df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>df<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>          flag_df <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>          buffer<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>      <span class="token keyword">elif</span> line<span class="token operator">==</span>b<span class="token string">'BODF\n'</span><span class="token punctuation">:</span>        flag_df <span class="token operator">=</span> <span class="token boolean">True</span>        buffer <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">read_df</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">:</span>    word <span class="token operator">+=</span> <span class="token string">'\n'</span> <span class="token comment" spellcheck="true"># add end of line </span>    self<span class="token punctuation">.</span>sess<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>write<span class="token punctuation">(</span>word<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># to bytes</span>    self<span class="token punctuation">.</span>sess<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> df  <span class="token keyword">def</span> <span class="token function">__enter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> self  <span class="token keyword">def</span> <span class="token function">__exit__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exc_type<span class="token punctuation">,</span> exc_val<span class="token punctuation">,</span> exc_tb<span class="token punctuation">)</span><span class="token punctuation">:</span>    self<span class="token punctuation">.</span>sess<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># call(['taskkill', '/F', '/T', '/PID', str(self.sess.pid)])</span>    self<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>  <span class="token keyword">with</span> Rsession<span class="token punctuation">(</span><span class="token string">'/path/to/script.R'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    display<span class="token punctuation">(</span>sess<span class="token punctuation">.</span>read_df<span class="token punctuation">(</span><span class="token string">'いろは'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sess<span class="token punctuation">.</span>read_df<span class="token punctuation">(</span><span class="token string">'やちよ'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h3><ul><li>Be careful of <strong>deadlock</strong></li></ul><p>The following lines will cause a deadlock if the execution of the process is not finished, e.g. using <code>while(TRUE)</code> to interact with <em>R</em> session. In that case, <em>Python</em> is waiting for <code>stdout</code> and <em>R</em> is waiting for <code>stdin</code>, and neither is really moving a single step forward.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> line <span class="token keyword">in</span> sess<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>In real world applications, <code>callbacks</code> are definitely necessary to avoid those situations. A practical strategy will be always reading <code>stdout</code> line by line and working with <code>callbacks</code> from <em>R</em> session to take the proper actions.</p><ul><li>Windows</li></ul><p>There are many subtleties in Windows. </p><ol><li><p>But the <em>encoding/decoding</em> is the most complicated one among them. Like in my case, <code>stdin</code> and <code>stdout</code> are handled properly in <code>utf-8</code>, whereas the <code>stderr</code> is <code>ShiftJIS</code> inheriting settings from powershell. If only Windows were to support locales like <code>ja_JP.UTF-8</code>…</p></li><li><p><code>rsession.terminate()</code> does not work… Try <code>subprocess.call([&#39;taskkill&#39;, &#39;/F&#39;, &#39;/T&#39;, &#39;/PID&#39;, str(rsession.pid)])</code> instead. Even after killing the subprocess, one should run either <code>rsession.terminate()</code>/<code>rsession.kill()</code> or <code>rsession.wait()</code> to let the process instance know it is terminated. Otherwise, those methods of checking the status of the process would not work properly.</p></li><li><p><code>End Of Line</code> from <code>stdout</code> on Windows is <em>‘\r\n’</em> rather than <em>‘\n’</em>.</p></li></ol><p>Developing on a unix system would solve them naturally…</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IO </tag>
            
            <tag> Subprocess </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Connect to AWS Redshift In R By ODBC</title>
      <link href="/2020/07/r-connect-to-aws-redshift-by-odbc/"/>
      <url>/2020/07/r-connect-to-aws-redshift-by-odbc/</url>
      
        <content type="html"><![CDATA[<h3 id="docker-image"><a href="#docker-image" class="headerlink" title="docker image"></a>docker image</h3><pre class="line-numbers language-Dockerfile"><code class="language-Dockerfile">FROM rocker/tidyverse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This is a widely-used docker image of RStudio and Tidyverse. There are several variations of the <em>rocker</em> images. Just choose the one that suits your needs most.</p><h3 id="unixodbc"><a href="#unixodbc" class="headerlink" title="unixodbc"></a>unixodbc</h3><p>In <em>Dockerfile</em></p><pre class="line-numbers language-Dockerfile"><code class="language-Dockerfile">RUN apt-get -y install unixodbc unixodbc-dev# update the LD_LIBRARY_PATH to contain libodbcinst.soENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Enter the docker to see further information of <code>unixodbc</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># run this line</span>odbcinst -j<span class="token comment" spellcheck="true"># ...</span>DRIVERS<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>: /etc/odbcinst.iniSYSTEM DATA SOURCES: /etc/odbc.ini<span class="token comment" spellcheck="true"># ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In later steps, we will put our <em>.ini</em> files to the right locations.</p><p>Although it is possible to change the paths by setting environment variables, there is not much point doing that inside of a docker. See <em>page 35</em> of <strong>configuration guide</strong> on this <a href="https://docs.aws.amazon.com/redshift/latest/mgmt/configure-odbc-connection.html" target="_blank" rel="noopener">site</a> for more details. To be specific, the environment variable <code>AMAZONREDSHIFTODBCINI</code> in official documents doesn’t work and is not fixed as of now.</p><h3 id="Amazon-Redshift-odbc-driver-installation-settings"><a href="#Amazon-Redshift-odbc-driver-installation-settings" class="headerlink" title="Amazon Redshift odbc driver installation/settings"></a>Amazon Redshift odbc driver installation/settings</h3><p>You can setup those <em>.ini</em> files from scratch, or find the templates provided by <em>Amazon Redshift odbc driver</em> in the following paths</p><ul><li><em>/opt/amazon/redshiftodbc/Setup</em></li><li><em>/opt/amazon/redshiftodbc/lib/64</em></li></ul><p>Here are some examples of those <em>.ini</em> files.</p><p><em>odbcinst.ini</em></p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[ODBC Drivers]</span>Amazon Redshift (x86)<span class="token attr-value"><span class="token punctuation">=</span>Installed</span>Amazon Redshift (x64)<span class="token attr-value"><span class="token punctuation">=</span>Installed</span><span class="token selector">[Amazon Redshift (x86)]</span><span class="token constant">Description</span><span class="token attr-value"><span class="token punctuation">=</span>Amazon Redshift ODBC Driver (32-bit)</span><span class="token constant">Driver</span><span class="token attr-value"><span class="token punctuation">=</span>/opt/amazon/redshiftodbc/lib/32/libamazonredshiftodbc32.so</span><span class="token selector">[Amazon Redshift (x64)]</span><span class="token constant">Description</span><span class="token attr-value"><span class="token punctuation">=</span>Any thing you like</span># the driver path might change... see for yourself where it is.<span class="token constant">Driver</span><span class="token attr-value"><span class="token punctuation">=</span>/opt/amazon/redshiftodbc/lib/64/libamazonredshiftodbc64.so</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>odbc.ini</em></p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[ODBC Data Sources]</span><span class="token constant">Amazon_Redshift_x32</span><span class="token attr-value"><span class="token punctuation">=</span>Amazon Redshift (x86)</span><span class="token constant">Amazon_Redshift_x64</span><span class="token attr-value"><span class="token punctuation">=</span>Amazon Redshift (x64)</span><span class="token selector">[Amazon Redshift (x86)]</span><span class="token constant">Driver</span><span class="token attr-value"><span class="token punctuation">=</span>/opt/amazon/redshiftodbc/lib/32/libamazonredshiftodbc32.so</span><span class="token constant">Host</span><span class="token attr-value"><span class="token punctuation">=</span>examplecluster.abc123xyz789.us-west-2.redshift.amazonaws.com</span><span class="token constant">Port</span><span class="token attr-value"><span class="token punctuation">=</span>5932</span><span class="token constant">Database</span><span class="token attr-value"><span class="token punctuation">=</span>dev</span><span class="token constant">locale</span><span class="token attr-value"><span class="token punctuation">=</span>en-US</span><span class="token selector">[Amazon Redshift (x64)]</span><span class="token constant">Driver</span><span class="token attr-value"><span class="token punctuation">=</span>/opt/amazon/redshiftodbc/lib/64/libamazonredshiftodbc64.so</span># Modify following settings# if access from docker to localhost# Server<span class="token attr-value"><span class="token punctuation">=</span>host.docker.internal</span># Host and Server might be interchangeable<span class="token constant">Host</span><span class="token attr-value"><span class="token punctuation">=</span>examplecluster.abc123xyz789.us-west-2.redshift.amazonaws.com</span><span class="token constant">Port</span><span class="token attr-value"><span class="token punctuation">=</span>5932</span><span class="token constant">Database</span><span class="token attr-value"><span class="token punctuation">=</span>dev</span><span class="token constant">locale</span><span class="token attr-value"><span class="token punctuation">=</span>en-US</span># your username and password here<span class="token constant">UID</span><span class="token attr-value"><span class="token punctuation">=</span>[username]</span><span class="token constant">PWD</span><span class="token attr-value"><span class="token punctuation">=</span>[password]</span># Optional: These values can also be specified in the connection string.# sslmode<span class="token attr-value"><span class="token punctuation">=</span></span># sslCertPath<span class="token attr-value"><span class="token punctuation">=</span></span># KeepAlive<span class="token attr-value"><span class="token punctuation">=</span>1</span># KeepAliveCount<span class="token attr-value"><span class="token punctuation">=</span>0</span># KeepAliveTime<span class="token attr-value"><span class="token punctuation">=</span>0</span># KeepAliveInterval<span class="token attr-value"><span class="token punctuation">=</span>0</span># SingleRowMode<span class="token attr-value"><span class="token punctuation">=</span>0</span># UseDeclareFetch<span class="token attr-value"><span class="token punctuation">=</span>0</span># Fetch<span class="token attr-value"><span class="token punctuation">=</span>100</span># UseMultipleStatements<span class="token attr-value"><span class="token punctuation">=</span>0</span># UseUnicode<span class="token attr-value"><span class="token punctuation">=</span>1</span># BoolsAsChar<span class="token attr-value"><span class="token punctuation">=</span>1</span># TextAsLongVarchar<span class="token attr-value"><span class="token punctuation">=</span>1</span># MaxVarchar<span class="token attr-value"><span class="token punctuation">=</span>65535</span># MaxLongVarchar<span class="token attr-value"><span class="token punctuation">=</span>65535</span># MaxBytea<span class="token attr-value"><span class="token punctuation">=</span>8190</span># ProxyHost<span class="token attr-value"><span class="token punctuation">=</span></span># ProxyPort<span class="token attr-value"><span class="token punctuation">=</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>amazon.redshiftodbc.ini</em></p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token constant">locale</span><span class="token attr-value"><span class="token punctuation">=</span>en-US</span><span class="token constant">ErrorMessagesPath</span><span class="token attr-value"><span class="token punctuation">=</span>/opt/amazon/redshiftodbc/ErrorMessages</span><span class="token constant">LogLevel</span><span class="token attr-value"><span class="token punctuation">=</span>0</span><span class="token constant">LogPath</span><span class="token attr-value"><span class="token punctuation">=</span>[LogPath]</span><span class="token constant">SwapFilePath</span><span class="token attr-value"><span class="token punctuation">=</span>/tmp</span><span class="token constant">ODBCInstLib</span><span class="token attr-value"><span class="token punctuation">=</span>libodbcinst.so</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RStudio-settings-file"><a href="#RStudio-settings-file" class="headerlink" title="RStudio settings file"></a>RStudio settings file</h3><p>If you already have <em>R</em> locally, you can find the same <em>rstudio-prefs.json</em> file in the same place in user directory.</p><p>Example:</p><p><em>~/.config/rstudio/rstudio-prefs.json</em></p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"soft_wrap_r_files"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"editor_theme"</span><span class="token operator">:</span> <span class="token string">"Tomorrow Night"</span><span class="token punctuation">,</span>  <span class="token property">"font_size_points"</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Overview-of-the-Dockerfile-and-docker-compose-yml"><a href="#Overview-of-the-Dockerfile-and-docker-compose-yml" class="headerlink" title="Overview of the Dockerfile and docker-compose.yml"></a>Overview of the Dockerfile and docker-compose.yml</h3><pre class="line-numbers language-Dockerfile"><code class="language-Dockerfile">FROM rocker/tidyverse# assume you have already downloaded the driverCOPY ./AmazonRedshiftODBC-1.x.x.xxxx-x.x86_64.deb ./RUN apt install ./AmazonRedshiftODBC-1.x.x.xxxx-x.x86_64.debRUN apt-get updateRUN apt-get -y install unixodbc unixodbc-dev# can also install other necessary packages hereRUN R -e 'install.packages(c("odbc"))'ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnuCOPY ./odbc.ini /etc/COPY ./odbcinst.ini /etc/COPY ./amazon.redshiftodbc.ini /opt/amazon/redshiftodbc/lib/64/# assume we are using username "rstudio" to login to docker container# if you prefer other user names, just change those two linesRUN mkdir -p /home/rstudio/.config/rstudio/COPY ./rstudio-prefs.json /home/rstudio/.config/rstudio/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yml"><code class="language-yml">version: "3"services:   rstudio:    build: .    ports:       - "8787:8787"    environment:       - ROOT=TRUE      # user name      - USERID=rstudio      # replace by your password      - PASSWORD=yourpassword    sysctls:      - net.ipv4.tcp_keepalive_time=200      - net.ipv4.tcp_keepalive_intvl=200      - net.ipv4.tcp_keepalive_probes=5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><sup>* <code>sysctls</code> options are to fix the timeout bug of docker in some cases. See references for more details.</sup></p><h3 id="Connecting-from-R"><a href="#Connecting-from-R" class="headerlink" title="Connecting from R"></a>Connecting from R</h3><p>First start the docker container.</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># first time</span>docker-compose up<span class="token comment" spellcheck="true"># start container</span>docker-compose start<span class="token comment" spellcheck="true"># stop container</span>docker-compose stop<span class="token comment" spellcheck="true"># build after updating</span>docker-compose up --build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Connect to RServer from <a href="localhost:8787">localhost:8787</a> in browser. Enter your username and password in <em>docker-compose.yml</em> file.</p><pre class="line-numbers language-r"><code class="language-r"><span class="token comment" spellcheck="true"># top-right panel of RStudio will show the schemas and tables if succeeded</span>con <span class="token operator">&lt;-</span> DBI<span class="token operator">::</span>dbConnect<span class="token punctuation">(</span>odbc<span class="token operator">::</span>odbc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"Amazon Redshift (x64)"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># disconnect</span>DBI<span class="token operator">::</span>dbDisconnect<span class="token punctuation">(</span>con<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><p><a href="https://db.rstudio.com/databases/redshift/" target="_blank" rel="noopener">rstudio database</a></p></li><li><p><a href="https://docs.aws.amazon.com/redshift/latest/mgmt/connecting-firewall-guidance.html" target="_blank" rel="noopener">TCP/IP timeout</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redshift </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Upload DataFrame Object to AWS S3 Directly</title>
      <link href="/2020/07/aws-upload-dataframe-object-to-s3-by-boto3/"/>
      <url>/2020/07/aws-upload-dataframe-object-to-s3-by-boto3/</url>
      
        <content type="html"><![CDATA[<p>When uploading pandas dataframe to <em>S3</em>, there are times that it’s better to upload the data object directly than to temporarily save the file and upload the temporary file. This post suggests one relatively sufficient way to communicate with <em>S3</em> directory without dumping data to hard disk, thus all the operations are done in memory.</p><h3 id="Upload-data-objects"><a href="#Upload-data-objects" class="headerlink" title="Upload data objects"></a>Upload data objects</h3><ul><li>Without <code>gzip</code> compression</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> boto3<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> gzip<span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO<span class="token punctuation">,</span> BytesIOclient <span class="token operator">=</span> boto3<span class="token punctuation">.</span>client<span class="token punctuation">(</span><span class="token string">'s3'</span><span class="token punctuation">,</span> aws_access_key_id<span class="token operator">=</span><span class="token string">'aws_id'</span><span class="token punctuation">,</span> aws_secret_access_key<span class="token operator">=</span><span class="token string">'aws_key'</span><span class="token punctuation">)</span>df <span class="token operator">=</span> read<span class="token punctuation">.</span>csv<span class="token punctuation">(</span><span class="token string">'/path/to/your/file'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#...and other parameters</span>buff_str <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># save .tsv file to string buffer</span>df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>buff_str<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#...and other parameters</span>buff_byte <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span>buff_str<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'uft-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># why buff_byte.seek(0) does not matter here...</span>buff_byte<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>upload_fileobj<span class="token punctuation">(</span>Bucket<span class="token operator">=</span><span class="token string">'your_bucket'</span><span class="token punctuation">,</span> Key<span class="token operator">=</span><span class="token string">'/your/s3/key.tsv'</span><span class="token punctuation">,</span> Fileobj<span class="token operator">=</span>buff_byte<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>With <code>gzip</code> compression</li></ul><pre class="line-numbers language-python"><code class="language-python">buff_str <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span>buff_str<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>buff_byte <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> gzip<span class="token punctuation">.</span>open<span class="token punctuation">(</span>buff_byte<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>buff_str<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'uft-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># this time the reset of pointing can not be ignored...</span>buff_byte<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>upload_fileobj<span class="token punctuation">(</span>Bucket<span class="token operator">=</span><span class="token string">'your_bucket'</span><span class="token punctuation">,</span> Key<span class="token operator">=</span><span class="token string">'/your/s3/key.tsv.gz'</span><span class="token punctuation">,</span> Fileobj<span class="token operator">=</span>buff_byte<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Download-data-objects"><a href="#Download-data-objects" class="headerlink" title="Download data objects"></a>Download data objects</h3><ul><li>Without <code>gzip</code> compression</li></ul><pre class="line-numbers language-python"><code class="language-python">buff_byte <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>download_fileobj<span class="token punctuation">(</span>Bucket<span class="token operator">=</span><span class="token string">'your_bucket'</span><span class="token punctuation">,</span> Key<span class="token operator">=</span><span class="token string">'/your/s3/key.tsv'</span><span class="token punctuation">,</span> Fileobj<span class="token operator">=</span>buff_byte<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># reset the pointer of the buffer</span>buff_byte<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>buff_byte<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># and other parameters</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>With <code>gzip</code> compression</li></ul><pre class="line-numbers language-python"><code class="language-python">buff_byte <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>client<span class="token punctuation">.</span>download_fileobj<span class="token punctuation">(</span>Bucket<span class="token operator">=</span><span class="token string">'your_bucket'</span><span class="token punctuation">,</span> Key<span class="token operator">=</span><span class="token string">'/your/s3/key.tsv'</span><span class="token punctuation">,</span> Fileobj<span class="token operator">=</span>buff_byte<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># reset the pointer of the buffer</span>buff_byte<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>buff_byte<span class="token punctuation">,</span> compression<span class="token operator">=</span><span class="token string">'gzip'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># and other parameters</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> S3 </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>An Example of Library Multiprocessing in Python</title>
      <link href="/2020/06/python-multiprocessing-pool/"/>
      <url>/2020/06/python-multiprocessing-pool/</url>
      
        <content type="html"><![CDATA[<p>By default, <code>python</code> programs only utilize one CPU. This is not much of a problem for most cases, but when it comes to heavy computations, whether or not using computational resources to their fullest could make a big difference.</p><p>This post exhibits a simple example of the library <code>multiprocessing</code>‘s <code>Pool</code> module.</p><h3 id="Settings"><a href="#Settings" class="headerlink" title="Settings"></a>Settings</h3><p>For <em>Windows</em> users to test the code in <em>.ipynb</em>, the functions <strong>must</strong> be imported from other <em>.py</em> scripts. e.g.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># in file utils.py</span><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> x<span class="token operator">*</span>x<span class="token comment" spellcheck="true"># in main file</span><span class="token keyword">from</span> utils <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool<span class="token keyword">with</span> Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>  pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It seems that the default settings for MacOS has changed since <em>Python</em> 3.8. There are chances MacOS users must follow this suggestion as well. See the <a href="https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods" target="_blank" rel="noopener">link</a> for details.</p><h3 id="pool-map-func-iterable-chunksize-None"><a href="#pool-map-func-iterable-chunksize-None" class="headerlink" title="pool.map(func, iterable, chunksize=None)"></a>pool.map(func, iterable, chunksize=None)</h3><p>The simplest way of parallelizing computing given arguments in a list-like object.</p><p>The performance of the <code>pool.map()</code> is very close to the built-in <code>map()</code> in <em>Python</em>, except that it only accepts <strong>ONE</strong> argument. A trivial example is showed in previous section.</p><p>For the function to accept multiple arguments, one possible solution is to wrap the original function by a function that accepts one <code>dict</code> object as argument. Then unpack the arguments inside of the wrapper as pass them to the original function.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">g</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token keyword">def</span> <span class="token function">h</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>  a <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span>  b <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span>  <span class="token keyword">return</span> g<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token keyword">with</span> Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># set proper chunksize for better performance</span>  ret <span class="token operator">=</span> pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span> chunksize<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>There is also an iterator version of the function, which is <code>imap()</code> and its variant <code>imap_unordered()</code>. They are highly memory efficient, as we expect from iterators, and the latter does not maintain the order of the input list-like object.</p><h3 id="pool-starmap-func-iterable-chunksize-None"><a href="#pool-starmap-func-iterable-chunksize-None" class="headerlink" title="pool.starmap(func, iterable, chunksize=None)"></a>pool.starmap(func, iterable, chunksize=None)</h3><p>The method <code>pool.starmap()</code> is recently added to <code>Pool</code>, to tackle the multiple arguments problem. The input arguments are packed in <code>tuple</code> in the iterable parameter. For the same <em>g(a, b)</em> function previously, instead of wrapping up parameters in <em>dict</em> manually, it is possible to do the following.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">with</span> Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>  ret <span class="token operator">=</span> pool<span class="token punctuation">.</span>starmap<span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># print </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="functools-partial-func-args-kwargs"><a href="#functools-partial-func-args-kwargs" class="headerlink" title="functools.partial(func, args, *kwargs)"></a>functools.partial(func, <em>args, *</em>kwargs)</h3><p>The <code>partial()</code> function (adaptor) help bind unchanged parameters to the input function. It should be quite useful in practice along with <code>multiprocessing</code>.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> partial<span class="token keyword">with</span> Pool<span class="token punctuation">(</span>process<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># bind 2 to the parameter a</span>  func <span class="token operator">=</span> partial<span class="token punctuation">(</span>g<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  ret <span class="token operator">=</span> pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>func<span class="token punctuation">,</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># print 2, 3, 4</span>  <span class="token comment" spellcheck="true"># bind 3 to the parameter b</span>  func <span class="token operator">=</span> partial<span class="token punctuation">(</span>g<span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>  res <span class="token operator">=</span> pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>func<span class="token punctuation">,</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># print 3, 4, 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>There is some ambiguous behavior of <code>partial</code> and <code>Pool</code>. This is caused by the <code>pool.map()</code> which always passes the argument by <code>*args</code>.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> a<span class="token operator">-</span>b<span class="token keyword">with</span> Pool<span class="token punctuation">(</span>processes<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>  func <span class="token operator">=</span> partial<span class="token punctuation">(</span>sub<span class="token punctuation">,</span> a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>func<span class="token punctuation">,</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>An error will occur. </p><blockquote><p>sub() got multiple values for argument ‘a’</p></blockquote><h3 id="An-alternative-concurrent-futures-ProcessPoolExecuter"><a href="#An-alternative-concurrent-futures-ProcessPoolExecuter" class="headerlink" title="An alternative: concurrent.futures.ProcessPoolExecuter"></a>An alternative: concurrent.futures.ProcessPoolExecuter</h3><p>The <code>ProcessPoolExecuter</code> from <code>concurrent.futures</code> acts similar to <code>multiprocessing</code>, and contains less methods.</p><p>The <code>map</code> method does NOT execute lazily even if it returns a generator.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ProcessPoolExecutor<span class="token keyword">with</span> ProcessPoolExecutor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pool<span class="token punctuation">:</span>  ret <span class="token operator">=</span> pool<span class="token punctuation">.</span>map<span class="token punctuation">(</span>f<span class="token punctuation">,</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://docs.python.org/3/library/multiprocessing.html" target="_blank" rel="noopener">Official Documents</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Parallel Computing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Create ASW Spectrum From Local Parquet Files</title>
      <link href="/2020/06/aws-spectrum-from-local-parquet-files/"/>
      <url>/2020/06/aws-spectrum-from-local-parquet-files/</url>
      
        <content type="html"><![CDATA[<p>This post gives an example of uploading local parquet files to s3 and using <em>Spectrum</em> to make the data accessible from <em>Redshift</em>.</p><p>Generally it is more common to unload data directly from <em>Redshift</em> than create data by oneself. But this example helps deepen understanding of the whole process and thus can be easily applied to other scenarios.</p><h3 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h3><ul><li>Python libraries <code>boto3</code> and <code>pyspark</code> (along with <em>Spark</em>) installed</li><li>AWS account that enables you to use <em>S3</em>, <em>Redshift</em> and <em>Athena</em></li><li>Sufficient priorities of the account</li></ul><h3 id="Create-parquet-files-and-upload-to-S3"><a href="#Create-parquet-files-and-upload-to-S3" class="headerlink" title="Create parquet files and upload to S3"></a>Create parquet files and upload to <em>S3</em></h3><p>First step is to prepare data by transforming other data format to <code>parquet</code> files.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> boto3<span class="token keyword">from</span> spark<span class="token punctuation">.</span>sql <span class="token keyword">import</span> SparkSession<span class="token keyword">import</span> os<span class="token comment" spellcheck="true"># create/fetch spark session</span>ss <span class="token operator">=</span> SparkSession<span class="token punctuation">.</span>builder<span class="token punctuation">.</span>master<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>getOrCreate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># can also load other data formats</span><span class="token comment" spellcheck="true"># see Spark documents for more details</span>df <span class="token operator">=</span> ss<span class="token punctuation">.</span>read<span class="token punctuation">.</span>csv<span class="token punctuation">(</span><span class="token string">'/path/to/your/data.csv'</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> inferSchema<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># check if data types are correctly inferred</span>df<span class="token punctuation">.</span>printSchema<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># save to parquet files</span><span class="token comment" spellcheck="true"># partitionsBy is optional, but it is widely used for large datasets</span>df<span class="token punctuation">.</span>writer<span class="token punctuation">.</span>parquet<span class="token punctuation">(</span><span class="token string">'/path/to/target/directory/'</span><span class="token punctuation">,</span> partitionBy<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'your_partition_key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># upload to s3</span><span class="token comment" spellcheck="true"># this part can also be done from ASW CLI, and shall be more convenient</span><span class="token comment" spellcheck="true"># only for consistency of the block</span>client <span class="token operator">=</span> boto3<span class="token punctuation">.</span>client<span class="token punctuation">(</span><span class="token string">'s3'</span><span class="token punctuation">,</span>                      aws_access_key_id<span class="token operator">=</span><span class="token string">'your_access_key'</span><span class="token punctuation">,</span>                      aws_secret_access_key<span class="token operator">=</span><span class="token string">'your_access_secret'</span><span class="token punctuation">)</span><span class="token keyword">for</span> root<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span><span class="token string">'/path/to/your/target/director'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">for</span> file <span class="token keyword">in</span> files<span class="token punctuation">:</span>    filepath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>root<span class="token punctuation">,</span> file<span class="token punctuation">)</span>    client<span class="token punctuation">.</span>upload_file<span class="token punctuation">(</span>Bucket<span class="token operator">=</span><span class="token string">'your_s3_bucket'</span><span class="token punctuation">,</span>                       Filename<span class="token operator">=</span>filepath<span class="token punctuation">,</span>                       Key<span class="token operator">=</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'your_s3_bucket_prefix'</span><span class="token punctuation">,</span> filepath<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Create-Spectrum-or-External-Table-from-S3-files"><a href="#Create-Spectrum-or-External-Table-from-S3-files" class="headerlink" title="Create Spectrum, or External Table from S3 files"></a>Create <em>Spectrum</em>, or External Table from <em>S3</em> files</h3><p>Executing the following query in <em>Redshift</em>.</p><pre class="line-numbers language-SQL"><code class="language-SQL">CREATE EXTERNAL TABLE table_name (  var1 VARCHAR(32),  var2 INTEGER(36),  var3 TIMESTAMP WITHOUT TIME ZONE)-- PARTITIONED BY (var4 INTEGER)ROW FORMAT DELIMITED  FIELDS TERMINATED BY '|'STORED AS parquet  LOCATION 's3://your_prefix/your_dir_name/';SELECT  *FROM table_nameLIMIT 100;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If one didn’t specify the partition key, the above sql query is sufficient to load the data in s3 to the external table.</p><p>The case is that if partition key is specified, the sql query would only construct an <strong>Empty</strong> external table waiting to be feeded with data. </p><p>In case the test query can’t fetch any rows, it’s not the table that is broken. It is the process that remains unfinished.</p><h3 id="Feed-External-Table-with-data"><a href="#Feed-External-Table-with-data" class="headerlink" title="Feed External Table with data"></a>Feed External Table with data</h3><p>The command that AWS prepared for us is way too simple, only one line.</p><pre class="line-numbers language-SQL"><code class="language-SQL">MSCK REPAIR TABLE table_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This will automatically load all partitions in specified path to the external table.</p><p>The command might be straightforward and convenient when initializing a new table, but when updating the table by newly added partitions, there is a more explicit way of doing this.</p><p>Supposedly now you already added a new partition to <em>S3</em>.</p><pre class="line-numbers language-SQL"><code class="language-SQL">-- new_key_value is the partition_key's value that you wanted to add to the tableALTER TABLE table_name ADDPARTITION (partition_key=$new_key_value)LOCATION 's3://your_prefix/your_dir_name/partition_key=$new_partition_key/'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><sup>The ways of adding partition, either unloading from <em>Redshift</em> or uploading from local, might be different, but the data must be put in the right place. Writing a script for updating external table is a good practice to avoid mistakes.<sup></p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="https://docs.aws.amazon.com/redshift/latest/dg/c-spectrum-external-tables.html" target="_blank" rel="noopener">SPECTRUM EXTERNAL TABLES</a></p><p><a href="https://docs.aws.amazon.com/athena/latest/ug/msck-repair-table.html" target="_blank" rel="noopener">MSCK REPAIR TABLE</a></p><p><a href="https://docs.aws.amazon.com/athena/latest/ug/alter-table-add-partition.html" target="_blank" rel="noopener">ADD PARTITION</a></p>]]></content>
      
      
      <categories>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spectrum </tag>
            
            <tag> Athena </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Setup Environment On Remote Server, Updating</title>
      <link href="/2020/06/setup-environment-on-remote-server-updating/"/>
      <url>/2020/06/setup-environment-on-remote-server-updating/</url>
      
        <content type="html"><![CDATA[<p>This post record necessary documents for setting up environments on a remote server. The example here is <strong>Ubuntu 18</strong>.</p><h3 id="Add-user"><a href="#Add-user" class="headerlink" title="Add user"></a>Add user</h3><p>  <a href="https://www.cyberciti.biz/faq/create-a-user-account-on-ubuntu-linux/" target="_blank" rel="noopener">Reference</a></p><ul><li><p>Add</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">useradd</span> -s /bin/bash -d /home/<span class="token punctuation">{</span>dirname<span class="token punctuation">}</span> -m - G <span class="token function">sudo</span> <span class="token punctuation">{</span>username<span class="token punctuation">}</span><span class="token function">sudo</span> <span class="token function">passwd</span> <span class="token punctuation">{</span>username<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><sup><code>sudo passwd</code> can also be used to change password.<sup></p></li><li><p>Set up “<em>~/.ssh/</em>“</p><p><code>sudo chmod 0700 /home/{dirname}/.ssh/</code></p><p>Then append the contents of your public keys to “<em>~/.ssh/authorized_keys</em>“</p><p><code>sudo chown -R {username}:{username} /home/{username}/.ssh/</code></p></li><li><p>Delete</p><p><code>sudo userdel -r {username}</code></p><p><sup><code>-r</code> indicates deleting directory<sup></p></li></ul><h3 id="VS-code"><a href="#VS-code" class="headerlink" title="VS code"></a>VS code</h3><p>  Connect to remote server via ssh. <a href="https://code.visualstudio.com/docs/remote/ssh" target="_blank" rel="noopener">Documents</a>.</p><p>  <sup>hint: set longer <code>&quot;remote.SSH.connectTimeout&quot;</code> in case fail to start terminal.<sup></p><h3 id="Jupyter"><a href="#Jupyter" class="headerlink" title="Jupyter"></a>Jupyter</h3><p>  Official instructions can be found <a href="https://jupyter-notebook.readthedocs.io/en/latest/public_server.html" target="_blank" rel="noopener">here</a></p><ul><li><p>Setup password via</p><p><code>jupyter notebook password</code></p><p>The hashed password is in “<em>~/.jupyter/jupyter_notebook_config.json</em>“</p></li><li><p>Generate SSL certificate via</p><p><code>openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout mykey.key -out mycert.pem</code></p></li><li><p>Configure “<em>~/.jupyter/jupyter_notebook_config.py</em>“</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># Set options for certfile, ip, password, and toggle off</span><span class="token comment" spellcheck="true"># browser auto-opening</span>c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>certfile <span class="token operator">=</span> u<span class="token string">'/absolute/path/to/your/certificate/mycert.pem'</span>c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>keyfile <span class="token operator">=</span> u<span class="token string">'/absolute/path/to/your/certificate/mykey.key'</span><span class="token comment" spellcheck="true"># Set ip to '*' to bind on all interfaces (ips) for the public server</span>c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>ip <span class="token operator">=</span> <span class="token string">'*'</span>c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>password <span class="token operator">=</span> u<span class="token string">'sha1:bcd259ccf...&lt;your hashed password here>'</span>c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>open_browser <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># It is a good idea to set a known, fixed port for server access</span>c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token number">9999</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="Rstudio"><a href="#Rstudio" class="headerlink" title="Rstudio"></a>Rstudio</h3><p>  Instructions from <a href="https://rstudio.com/products/rstudio/download-server/" target="_blank" rel="noopener">official site</a>. Additional documents about installing R is found <a href="https://www.digitalocean.com/community/tutorials/how-to-install-r-on-ubuntu-18-04" target="_blank" rel="noopener">here</a>.</p><ul><li><p>Install <code>r-base</code></p><ul><li><p>add GPG key via</p><p><code>sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9</code></p></li><li><p>add repository via of R 4.0</p><p><code>sudo add-apt-repository &#39;deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/&#39;</code></p></li><li><p>install <code>r-base</code></p><p><code>sudo apt update</code></p><p><code>sudo apt install r-base</code></p></li><li><p>test installation</p><p><code>sudo -i R</code></p></li></ul></li><li><p>Install <code>rstudio-server</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gdebi-core<span class="token function">wget</span> https://download2.rstudio.org/server/bionic/amd64/rstudio-server-1.3.959-amd64.deb<span class="token function">sudo</span> gdebi rstudio-server-1.3.959-amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Server status</p><p><code>sudo systemctl status rstudio-server.service</code></p></li><li><p>Start/Stop <code>rstudio-server</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start rstudio-server<span class="token function">sudo</span> systemctl stop rstudio-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><p>  version: 5.7</p><ul><li><p>Install</p><p>  <code>sudo apt update</code></p><p>  <code>sudo apt install MySQL-server</code></p></li><li><p>Status, start and stop</p><p><code>sudo systemctl status mysql.service</code></p><p><code>sudo systemctl start mysql</code></p><p><code>sudo systemctl stop mysql</code></p></li><li><p>Settings for <code>utf8</code> characters, <a href="https://stackoverflow.com/questions/10957238/incorrect-string-value-when-trying-to-insert-utf-8-into-mysql-via-jdbc" target="_blank" rel="noopener">reference</a></p><ul><li><p>add <code>character-set-server=utf8mb4</code> and <code>collation-server=utf8mb4_unicode_ci</code> under <code>[mysqld]</code> in “<em>/etc/mysql/mysql.conf.d/mysqld.cnf</em>“</p></li><li><p>add <code>default-character-set=utf8mb4</code> under <code>[mysql]</code> in “<em>/etc/mysql/conf.d/mysql.cnf</em>“</p></li><li><p>alter database via</p><p><code>ALTER DATABASE $db_name CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</code></p></li><li><p>alter tables via</p><p><code>ALTER TABLE $table_name CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</code></p><p><code>ALTER TABLE $table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</code></p></li></ul></li></ul><h3 id="clang"><a href="#clang" class="headerlink" title="clang"></a>clang</h3><ul><li><a href="https://releases.llvm.org/download.html" target="_blank" rel="noopener">Official Site</a></li></ul><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><ul><li><p>Download JDK </p><p><code>wget --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; https://download.oracle.com/otn-pub/java/jdk/14.0.1+7/664493ef4a6946b186ff29eb326336a2/jdk-14.0.1_linux-x64_bin.tar.gz</code></p><p>The link can be found on <a href="https://www.oracle.com/java/technologies/javase-jdk14-downloads.html" target="_blank" rel="noopener">oracle.com</a></p></li></ul><ul><li>Download JRE from <a href="https://www.oracle.com/java/technologies/javase-jre8-downloads.html" target="_blank" rel="noopener">here</a></li></ul><ul><li><p>Official instructions</p><p><a href="https://docs.oracle.com/javase/10/install/installation-jdk-and-jre-linux-platforms.htm" target="_blank" rel="noopener">JDK</a></p><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/install/linux_jre.html" target="_blank" rel="noopener">JRE</a></p></li></ul><h3 id="PySpark"><a href="#PySpark" class="headerlink" title="PySpark"></a>PySpark</h3><ul><li><p>Find the proper version on <a href="https://spark.apache.org/downloads.html" target="_blank" rel="noopener">this site</a></p></li><li><p>Extract files and move to “<em>/opt/spark</em>“</p></li><li><p>Add environment variables to “<em>~/.bashrc</em>“</p><ul><li><code>export SPARK_HOME=/opt/spark</code></li><li><code>export PATH=$PATH:$SPARK_HOME/bin:$SPARK_HOME/sbin</code></li></ul></li><li><p>Add JRE path to “<em>/opt/spark/conf/spark-env.sh</em>“</p><ul><li>copy “<em>spark-env.sh.template</em>“ in the directory and remove the extension</li><li>add <code>export JAVA_HOME=/your_path/jvm/jre1.8.0_251</code> and <code>export PATH=$PATH:$JAVA_HOME/bin</code> to “<em>/opt/spark/conf/spark-env.sh</em>“</li></ul><p><sup>* For windows users, please construct “<em>spark-env.cmd</em>“ first in the directory, <a href="https://stackoverflow.com/questions/38300099/what-is-the-right-way-to-edit-spark-env-sh-before-running-spark-shell" target="_blank" rel="noopener">reference</a><sup></p></li><li><p>Set log level in “<em>/opt/spark/conf/log4j.properties</em>“ to suppress warnings</p><ul><li>copy <code>cp log4j.properties.template log4j.properties</code></li><li>add <code>log4j.logger.org.apache.spark.api.python.PythonGatewayServer=ERROR</code></li></ul></li></ul><p>Following steps add <code>native-hadoop library</code> to spark</p><ul><li>Download Hadoop from <a href="https://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-3.2.1/hadoop-3.2.1.tar.gz" target="_blank" rel="noopener">here</a></li></ul><ul><li><p>Extract <code>tar zxvf {hadoop-.tar.gz}</code> and copy to “<em>/opt/hadoop</em>“</p></li><li><p>Add following lines to “<em>/opt/spark/conf/spark-env.sh</em>“</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">export</span> HADOOP_HOME<span class="token operator">=</span>/opt/hadoop<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$HADOOP_HOME</span>/bin<span class="token function">export</span> LD_LIBRARY_PATH<span class="token operator">=</span><span class="token variable">$LD_LIBRARY_PATH</span><span class="token keyword">:</span><span class="token variable">$HADOOP_HOME</span>/lib/native<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Environments </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R - Smooth Zigzag Graph</title>
      <link href="/2020/05/r-smooth-zigzag-graph/"/>
      <url>/2020/05/r-smooth-zigzag-graph/</url>
      
        <content type="html"><![CDATA[<p>Visualization shall be the most important part in the field of data science. Despite there are many positions for hard-core machine learning techniques, in the future it is expected to see more and more jobs for so-called general purpose data science, where data scientists are facing clients who barely know mathematics and models rather than engineering, which could be solved by logics. The most straight forward approach of showing the results from a project to the client is always all sorts of visualizations (graphs) , with mathematical formulae playing the sub role. To tell the truth, clients could not care less about technical details as long as the theory (model) is autonomous in their minds. A well-drawn graph is exactly the most powerful weapon to give the autonomy to the others and convince them from inside of their hearts. </p><p>There are many ways of making the visualizations more attractive and appealing, so many that even one book can not depict them all. This article is focusing on one specific techniques that will make your graph more appealing without deviating much from the data behind the graph.</p><h3 id="Prepare-Data"><a href="#Prepare-Data" class="headerlink" title="Prepare Data"></a>Prepare Data</h3><p>A very good example of zigzag data is <a href="https://trends.google.com/" target="_blank" rel="noopener">Google Trends</a>, where the search trend of a certain word/topic is visualized given various settings (e.g. location). Especially when the time range is set to <code>past 4 hours</code>, the unit of data will be <code>one minute</code>. The fluctuation of data can be quite large that a normal trend(line) plot looks very bleak.</p><p>For example, the data of <code>softbank</code> in <code>Japan</code>, <code>past 4 hours</code> are available in the following <a href="https://trends.google.com/trends/explore?date=now%204-H&geo=JP&q=softbank" target="_blank" rel="noopener">link</a>.</p><p>Let’s visualize the raw data in R.</p><pre class="line-numbers language-r"><code class="language-r">library<span class="token punctuation">(</span>tidyverse<span class="token punctuation">)</span>library<span class="token punctuation">(</span>haven<span class="token punctuation">)</span>library<span class="token punctuation">(</span>lubridate<span class="token punctuation">)</span>library<span class="token punctuation">(</span>imputeTS<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># linear interpolation</span>library<span class="token punctuation">(</span>smoother<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># gaussian filter</span>theme_set<span class="token punctuation">(</span>theme_bw<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># timestamp with timezone will be converted to utc time</span>df_origin <span class="token operator">&lt;-</span> read_csv<span class="token punctuation">(</span><span class="token string">'./multiTimeline.csv'</span><span class="token punctuation">,</span> col_names <span class="token operator">=</span> c<span class="token punctuation">(</span><span class="token string">'date'</span><span class="token punctuation">,</span> <span class="token string">'hit'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> skip <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># limit time range to 2 hours (121 obs.)</span>start_at <span class="token operator">&lt;-</span> ceiling_date<span class="token punctuation">(</span>min<span class="token punctuation">(</span>df_origin<span class="token operator">$</span>date<span class="token punctuation">)</span><span class="token punctuation">,</span> unit <span class="token operator">=</span> <span class="token string">'hours'</span><span class="token punctuation">)</span> <span class="token operator">+</span> hours<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>end_at <span class="token operator">&lt;-</span> floor_date<span class="token punctuation">(</span>max<span class="token punctuation">(</span>df_origin<span class="token operator">$</span>date<span class="token punctuation">)</span><span class="token punctuation">,</span> unit <span class="token operator">=</span> <span class="token string">'hours'</span><span class="token punctuation">)</span>df_main <span class="token operator">&lt;-</span> df_origin <span class="token percent-operator operator">%>%</span>  filter<span class="token punctuation">(</span>date<span class="token operator">>=</span>start_at<span class="token punctuation">,</span> date<span class="token operator">&lt;=</span>end_at<span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>  mutate<span class="token punctuation">(</span>date <span class="token operator">=</span> date <span class="token operator">+</span> hours<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># optional: convert to local(Japan) timezone</span>ggplot<span class="token punctuation">(</span>df_main<span class="token punctuation">,</span> aes<span class="token punctuation">(</span>date<span class="token punctuation">,</span> hit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>  geom_line<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>  theme<span class="token punctuation">(</span>    axis.title <span class="token operator">=</span> element_text<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    axis.text <span class="token operator">=</span> element_text<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Without loss of generality, the columns are renamed to <em>date</em> and <em>hit</em>. To make the fluctuations more conspicuous, the time range is limited to a 2-hour interval.</p><p><img src="/images/r_smooth_zigzag_raw.jpg" alt="Raw Data"></p><p>The data itself shall reflect the real trend while the zigzags make it look less realist in naked eyes. It would be positively better to smooth the line and maintain the trend of the data simultaneously.</p><h3 id="Smooth"><a href="#Smooth" class="headerlink" title="Smooth"></a>Smooth</h3><p>In this section, we smooth the line by following steps</p><ol><li>construct smaller unit (1 minute -&gt; 6 seconds)</li><li>left join the original data</li><li>linearly interpolate missing values (NAs)</li><li>apply gaussian filter (adjustable window size)</li></ol><pre class="line-numbers language-r"><code class="language-r"><span class="token comment" spellcheck="true"># execute after previous block</span>df_smooth <span class="token operator">&lt;-</span> tibble<span class="token punctuation">(</span>  date <span class="token operator">=</span> seq.POSIXt<span class="token punctuation">(</span>min<span class="token punctuation">(</span>df_main<span class="token operator">$</span>date<span class="token punctuation">)</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>df_main<span class="token operator">$</span>date<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'6 sec'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># convert unit</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span>  left_join<span class="token punctuation">(</span>df_main<span class="token punctuation">,</span> by<span class="token operator">=</span><span class="token string">'date'</span><span class="token punctuation">)</span> <span class="token percent-operator operator">%>%</span> <span class="token comment" spellcheck="true"># left join</span>  mutate<span class="token punctuation">(</span>hit <span class="token operator">=</span> na_interpolation<span class="token punctuation">(</span>hit<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># linear interpolation</span>         hit <span class="token operator">=</span> smth.gaussian<span class="token punctuation">(</span>hit<span class="token punctuation">,</span> window <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># gaussian filter</span>ggplot<span class="token punctuation">(</span>df_smooth<span class="token punctuation">,</span> aes<span class="token punctuation">(</span>date<span class="token punctuation">,</span> hit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>  geom_line<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>  theme<span class="token punctuation">(</span>    axis.title <span class="token operator">=</span> element_text<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    axis.text <span class="token operator">=</span> element_text<span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/r_smooth_zigzag_smth.jpg" alt="Smoothed Data"><br><sup>* NAs generated at the boundaries after applying gaussian filter. The number is the same as window size.<sup></p><p>With larger window size the line will be smoother, whereas it deviates more from original data. The trade-off between smoothness and deviations is up to you.</p>]]></content>
      
      
      <categories>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tidyverse </tag>
            
            <tag> Interpolation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R - dplyr::rename automation</title>
      <link href="/2020/05/r-dplyr-rename-automation/"/>
      <url>/2020/05/r-dplyr-rename-automation/</url>
      
        <content type="html"><![CDATA[<p>The introduction of <em>tidyverse</em> library has drastically changed the way of data processing in R. Its consistent syntaxes and straightforward pipeline coding style increase the readability of codes to a higher level, thus even beginners of R language could learn basic skills of data processing at a rapid pace. Certainly, there are downsides of this library. Its memory management is obscure to users, which cause a large amount of heavy, unnecessary copy operations implicitly. Discussing this feature is beyond the scope of the article, but in my opinion if one’s not dealing with extremely large data set, trading a little more electricity/time for convenience is a pretty good deal. At the end of the day, nobody wants to spend hours of searching on the Internet to improve seconds of runtime.</p><h3 id="dplyr-rename"><a href="#dplyr-rename" class="headerlink" title="dplyr::rename"></a>dplyr::rename</h3><p>Compare to the <em>pandas</em> library in <em>Python</em>, <em>tidyverse</em> hides many tedious code block inside its functions and classes. Like today’s topic, the <code>rename</code> function. The <code>rename</code> function, as its function name suggests, it changes columns’ names given dataframe and the names of new and old columns. </p><pre class="line-numbers language-r"><code class="language-r">library<span class="token punctuation">(</span>tidyverse<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># library(dplyr)</span><span class="token comment" spellcheck="true"># data frame with one column "A"</span>df <span class="token operator">&lt;-</span> data.frame<span class="token punctuation">(</span>A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># rename "A" to "B"</span><span class="token comment" spellcheck="true"># either of the following ways works</span>df <span class="token percent-operator operator">%>%</span>  rename<span class="token punctuation">(</span><span class="token string">"B"</span> <span class="token operator">=</span> <span class="token string">"A"</span><span class="token punctuation">)</span>df <span class="token percent-operator operator">%>%</span>  rename<span class="token punctuation">(</span>B <span class="token operator">=</span> <span class="token string">"A"</span><span class="token punctuation">)</span>df <span class="token percent-operator operator">%>%</span>  rename<span class="token punctuation">(</span>B <span class="token operator">=</span> A<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><sup>* pipe operator, aka <code>%&gt;%</code>, pass LHS to the first parameter of RHS function<sup></p><h3 id="rename-given-string-variable"><a href="#rename-given-string-variable" class="headerlink" title="rename given string variable"></a>rename given string variable</h3><p>Someone who knows other general-purpose programming languages might wonder how can the second and third ways work when the column names are supposed to be a <em>string</em>. I cannot answer the question myself and reading the source codes of a high-level language is definitely a pain in the ass. But if we accept this syntax at first, it is actually very convenient and readable even without quotes, because now everyone knows the parameters in <code>rename</code> (of course in its general version <code>select</code>) are all column names.</p><p>Nothing is all made of ‘good’. This simplification has one greatest downside. It is in the automation of program.</p><p>In a general process of an automation, parameters are passed among programs by strings and other forms of data types, while inside a script, the inputs are translated into variables. Under the setting, what we want to do next is <code>rename</code> column names of dataframe given a string variable.</p><p>This is not as simple as it looks like. See the following attempts.</p><p>In the first time, “A” column is renamed to “C”. This is definitely what we don’t want.</p><p>Someone might think of a seemingly right answer: we haven’t yet extracted the value of <em>C</em>. But the unquoted version fails as well.</p><pre class="line-numbers language-r"><code class="language-r">df <span class="token operator">&lt;-</span> data.frame<span class="token punctuation">(</span>A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>C <span class="token operator">=</span> <span class="token string">"B"</span>df <span class="token percent-operator operator">%>%</span>  rename<span class="token punctuation">(</span>C <span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output:</span><span class="token comment" spellcheck="true">#   C</span><span class="token comment" spellcheck="true"># 1 1</span>df <span class="token percent-operator operator">%>%</span>  rename<span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>C <span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output:</span><span class="token comment" spellcheck="true"># Unexpected '=' in "df %>%rename(!!C ="</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><sup>* <code>!!</code> is an unquotation operator<sup></p><h3 id="assignment-operator-s"><a href="#assignment-operator-s" class="headerlink" title="assignment operator(s)"></a>assignment operator(s)</h3><p>The error message shows the R interpreter failed exactly at the <code>=</code> right after <code>!!C</code>. This is the clue for the right answer but there is a long way to arrive at it with the help of Google.</p><p>Here is the write way to <code>rename</code> dataframe columns given <em>string</em> variable.</p><pre class="line-numbers language-r"><code class="language-r">df <span class="token operator">&lt;-</span> data.frame<span class="token punctuation">(</span>A <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>C <span class="token operator">=</span> <span class="token string">"B"</span>df <span class="token percent-operator operator">%>%</span>  rename<span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>C <span class="token operator">:</span><span class="token operator">=</span> A<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output:</span><span class="token comment" spellcheck="true">#   B</span><span class="token comment" spellcheck="true"># 1 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><sup>* <code>!=</code> is one of assignment operators in R<sup></p><p>The official documents says: </p><blockquote><p>The <code>:=</code> is mainly useful to unquote names. Unlike <code>=</code>, it supports <code>!!</code> on its LHS</p></blockquote><p>It might be unknown to many people, but R is an old language. Though we mostly use it for statistical analysis, we cannot deny that R has accumulated a very large set of operations and syntaxes for general programming. This is just one glimpse of R’s long history.</p><p>If you search the assignment operators of R on the Internet, you’ll only find more than what you have expected. And thinking about its capability of overloading operators, R language looks more and more like an uncharted water to me, when I think I’ve mastered sufficient R skills.</p>]]></content>
      
      
      <categories>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Automation </tag>
            
            <tag> Tidyverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R non-ascii character encoding</title>
      <link href="/2020/05/r-non-ascii-character-encoding/"/>
      <url>/2020/05/r-non-ascii-character-encoding/</url>
      
        <content type="html"><![CDATA[<p>Although English has been a universal language for decades, tasks in real work are still dealing with other languages, which have more variations in characters. Of course, no one would naively expect them to be as simple as ascii characters.</p><p>To present those languages in computers smoothly, there are many standards of encoding. Some are international, where as others are designed only for limited number of languages. The encoding and decoding of languages thus became a crucial issue when one is dealing with non-English characters.</p><p>Wrong encoding and decoding will only lead to a <strong>new</strong> language on the monitor which no one could understand. Therefore, under most situations, the data should be encoded by international standards that won’t be affected by the locale of the computer or other factors, if possible. This is the best practical way to prevent an invention of a new language from happening.</p><p>Today’s example comes from a famous IDE for R development, <a href="https://rstudio.com/" target="_blank" rel="noopener">RStudio</a>.</p><h3 id="Setting"><a href="#Setting" class="headerlink" title="Setting"></a>Setting</h3><p>I was working on some data containing Chinese characters in several columns. The data was encoded by an international standard called “utf-8”. The goal of this job was to right-strip the regional characters from the variable so that it is comparable to another variable from a different data source.</p><h3 id="Trial"><a href="#Trial" class="headerlink" title="Trial"></a>Trial</h3><p>As usual, I loaded the libraries and switched locale to “chinese”. And the basic operations of <em>dplyr</em> comes next.</p><pre class="line-numbers language-r"><code class="language-r">library<span class="token punctuation">(</span>openxlsx<span class="token punctuation">)</span>library<span class="token punctuation">(</span>haven<span class="token punctuation">)</span>library<span class="token punctuation">(</span>stringi<span class="token punctuation">)</span>library<span class="token punctuation">(</span>tidyverse<span class="token punctuation">)</span>Sys.setlocale<span class="token punctuation">(</span>locale <span class="token operator">=</span> <span class="token string">'chinese'</span><span class="token punctuation">)</span>df <span class="token operator">&lt;-</span> <span class="token comment" spellcheck="true">## load df</span>df_new <span class="token operator">&lt;-</span> df <span class="token percent-operator operator">%>%</span>  mutate<span class="token punctuation">(</span>region <span class="token operator">=</span> stri_replace_last_regex<span class="token punctuation">(</span>region<span class="token punctuation">,</span> <span class="token string">'[区县镇市]$'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The code was supposed to work logically, but nothing changed…</p><p>Then I tried to debug why this even happened. After excluding the logic mistakes, I found that the following command returned false.</p><pre class="line-numbers language-r"><code class="language-r">any<span class="token punctuation">(</span>stri_detect_regex<span class="token punctuation">(</span>df<span class="token operator">$</span>region<span class="token punctuation">,</span> <span class="token string">'[区县镇市]$'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#FALSE returned...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The confusing things is that all input character could be print properly in the console. That’s why it took a long time to ascertain the hypothesis.</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>The time I found out the source of the problem could be <strong>encoding</strong>, I started searching for ways to convert the regex patterns to “utf-8”.</p><p>Here are two approaches.</p><pre class="line-numbers language-r"><code class="language-r">df_new <span class="token operator">&lt;-</span> df <span class="token percent-operator operator">%>%</span>  mutate<span class="token punctuation">(</span>region <span class="token operator">=</span> stri_replace_last_regex<span class="token punctuation">(</span>region<span class="token punctuation">,</span> enc2utf8<span class="token punctuation">(</span><span class="token string">'[区县镇市]$'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># or</span>df_new <span class="token operator">&lt;-</span> df <span class="token percent-operator operator">%>%</span>  mutate<span class="token punctuation">(</span>region <span class="token operator">=</span> stri_replace_last_regex<span class="token punctuation">(</span>region<span class="token punctuation">,</span>                                           stri_conv<span class="token punctuation">(</span><span class="token string">'[区县镇市]$'</span><span class="token punctuation">,</span> from<span class="token operator">=</span><span class="token string">'GB18030'</span><span class="token punctuation">,</span> to<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The first approach works without extra parameters while the second one requires a certain level of knowledge about the encodings of the language.</p>]]></content>
      
      
      <categories>
          
          <category> R </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Character/String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Draw a random point in a circle uniformly</title>
      <link href="/2020/02/random-point-in-circle/"/>
      <url>/2020/02/random-point-in-circle/</url>
      
        <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This post is inspired by the problem from <a href="https://leetcode.com/problems/generate-random-point-in-a-circle/" target="_blank" rel="noopener">LeetCode</a>, where one is asked to write a program to draw any point uniformly in a circle given its center coordinate and radius. The natural approach would be sampling two uniform random variables, which form a square geometrically, and rejecting them if they happen to fall out of the circle. This algorithm is highly efficient in terms of expectation as the rejection area is only about ( \frac{1}{4} ) of the square.</p><p>The time and space complexity are now both ( Op(1) ), not the general ( O(1) ). The uncertainty is not a big problem in the context, but it still leaves a problem unsolved, that is, is there any other approach that could tackle the problem in a deterministic way?</p><h2 id="Sample-rejection-approach"><a href="#Sample-rejection-approach" class="headerlink" title="Sample rejection approach"></a>Sample rejection approach</h2><p>The most straight forward algorithm would be sampling rejection.<br>Following codes briefly explain the algorithm.</p><p>A class is initialized with the information of the circle, and a random point is produced after the last draw falls into the circle.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomPointInCircle</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> r<span class="token punctuation">,</span> xC<span class="token punctuation">,</span> yC<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RandomPointInCircle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">,</span> <span class="token keyword">double</span> x_center<span class="token punctuation">,</span> <span class="token keyword">double</span> y_center<span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token operator">=</span>radius<span class="token punctuation">;</span>        xC<span class="token operator">=</span>x_center<span class="token punctuation">;</span>        yC<span class="token operator">=</span>y_center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">randPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>True<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//generate x and y by (Math.random()-0.5)*2</span>        <span class="token comment" spellcheck="true">//if they are inside the unit circle, center at (0,0) and radius=1, break</span>        <span class="token comment" spellcheck="true">//else continue</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>xC<span class="token operator">+</span>r<span class="token operator">*</span>x<span class="token punctuation">,</span> yC<span class="token operator">+</span>r<span class="token operator">*</span>y<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The process is quite clear, but a little bit slower than an ( O(1) ) algorithm.</p><h2 id="Mathematical-approaches"><a href="#Mathematical-approaches" class="headerlink" title="Mathematical approaches"></a>Mathematical approaches</h2><h3 id="Cartesian-coordinates"><a href="#Cartesian-coordinates" class="headerlink" title="Cartesian coordinates"></a>Cartesian coordinates</h3><p>Why don’t we try to transform the problem into a mathematical problem.</p><p>Let’s start from the conditions.</p><p>To simply the notation, The circle is normalized to be centered at ( (0,0) ) with radius being 1.Thus, ( x ) and ( y ) lie between -1 and 1.</p><p>Uniformality means the probability of draw any point is identical, that is, probability density function ( f(x,y) ) is a constant on the support.</p><p>\[ 1 = \iint_\Omega f(x,y) \mathrm{d}x\mathrm{d}y \]<br>\[ 1 = f(x,y) \iint_\Omega \mathrm{d}x\mathrm{d}y \]<br>as ( f(x,y) ) is a constant.</p><p>Since the integration is the area of the circle, we get<br>\[ f(x, y)=\frac{1}{\pi} \]</p><p>Generally in an algorithmic setting, one can only generate random variables uniformly distributed between 0 and 1 independently. </p><p>And obviously ( x ) and ( y ) are not independent of each other. At least the support is not independent from first look.</p><p>The following theorem explains the relationship between joint distribution and marginal distribution.</p><p>\[ f(x, y)=f(x) \times f(y|x) \]</p><p>LHS is constant and has already been obtained, and the support of ( f(y|x) ) can also be derived as ( [-\sqrt{1-x^2}, \sqrt{1-x^2} ] ).</p><p>Let’s assume that ( f(y|x) ) follows a uniform distribution on its support. This would not hurt us as long it does not violate the conditions.</p><p>Proving condition is out of the scope of the post, but the assumption can be proved to be true by contradiction straightforwardly.</p><p>Given this new condition, the density of ( x ) is </p><p>\[ f(x) = \frac{2\sqrt{1-x^2}}{\pi} \]</p><p>Thus its cumulative density function is derived by integration.</p><p>\[ F(x) = \frac{1}{\pi}(x\sqrt{1-x^2} + \mathrm{arcsin}(x)) + \frac{1}{2} \]</p><p>Now we can use the <a href="https://en.wikipedia.org/wiki/Random_number_generation" target="_blank" rel="noopener">inverse transform sampling-method</a> to generate ( x ) from a uniform variable between 0 and 1.</p><p>It is a pity that the inverse of ( F(x) ) does not have a close form, but we can still find it using binary search in a reasonably short time.</p><p>The code is exhibited as following.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomPointInCircle</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> r<span class="token punctuation">,</span> xC<span class="token punctuation">,</span> yC<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RandomPointInCircle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">,</span> <span class="token keyword">double</span> x_center<span class="token punctuation">,</span> <span class="token keyword">double</span> y_center<span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token operator">=</span>radius<span class="token punctuation">;</span>        xC<span class="token operator">=</span>x_center<span class="token punctuation">;</span>        yC<span class="token operator">=</span>y_center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">randPoint_xy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> tempX<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">,</span> tempY<span class="token operator">=</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> x<span class="token operator">=</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>tempX<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> y<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token operator">*</span>tempY<span class="token punctuation">;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>xC<span class="token operator">+</span>r<span class="token operator">*</span>x<span class="token punctuation">,</span> yC<span class="token operator">+</span>r<span class="token operator">*</span>y<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">double</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> left<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> err<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1e-8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            x<span class="token operator">=</span><span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            err<span class="token operator">=</span><span class="token function">cdf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">-</span>target<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>                right<span class="token operator">=</span>x<span class="token punctuation">;</span>            <span class="token keyword">else</span>                left<span class="token operator">=</span>x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> <span class="token function">cdf</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>  <span class="token punctuation">(</span>x<span class="token operator">*</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>x<span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">asin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>Math<span class="token punctuation">.</span>PI<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Polar-coordinates"><a href="#Polar-coordinates" class="headerlink" title="Polar coordinates"></a>Polar coordinates</h3><p>The only downside of the cartesian coordinate approach is the binary search part. Because of it, the time complexity remains to be ( Op(1) ), though now space complexity is ( O(1) ).</p><p>A natural thought would be to find a close-form inverse CDF. But how?</p><p>In this subsection, we challenge the problem by another representation of circles.</p><p>Let’s represent any point  in a circle by its angle to x-axis and distance to ( (0,0) ). Using the same normalization, the angle ( \theta ) and distance ( d ) should be transformed to ( (x,y) ) by<br>\[ x = \mathrm{cos}(\theta)d \]<br>\[ y = \mathrm{sin}(\theta)d \]<br>, where ( \theta \in [-\pi, \pi ] ) and ( d \in  [0, 1] )</p><p>And the next equation holds on their support<br>\[  f(\theta, d) = f(x, y)|J| \]<br>, where<br>\[ J = \begin{bmatrix} \frac{\partial x}{\partial \theta} &amp; \frac{\partial y}{\partial \theta} \\ \frac{\partial x}{\partial d} &amp; \frac{\partial y}{\partial d} \end{bmatrix} \]</p><p>and ( |\cdot| ) represents the determinant and absolute operation.</p><p>Thus,<br>\[ |J| = | - \mathrm{sin}^2(\theta)d - \mathrm{cos}^2(\theta)d | = d \]</p><p>Now we have<br>\[  f(\theta, d) = \frac{1}{\pi} \times d \]</p><p>Like in previous subsection, ( f(\theta) ) follows a uniform distribution by contradiction, but the conditional distribution of ( d ) is simpler<br>\[ f(d|\theta)=2d=f(d) \]<br>Moreover, the CDF of ( d ) is<br>\[ F(d) = d^2 \]<br>, which just has a close-form inverse function.</p><p>The idea further simplified, or eliminated, the binary search part.</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomPointInCircle</span> <span class="token punctuation">{</span>    <span class="token keyword">double</span> r<span class="token punctuation">,</span> xC<span class="token punctuation">,</span> yC<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RandomPointInCircle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">,</span> <span class="token keyword">double</span> x_center<span class="token punctuation">,</span> <span class="token keyword">double</span> y_center<span class="token punctuation">)</span> <span class="token punctuation">{</span>        r<span class="token operator">=</span>radius<span class="token punctuation">;</span>        xC<span class="token operator">=</span>x_center<span class="token punctuation">;</span>        yC<span class="token operator">=</span>y_center<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">randPoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> theta<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>Math<span class="token punctuation">.</span>PI<span class="token operator">*</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dist<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> x<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token operator">*</span>dist<span class="token punctuation">,</span> y<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token operator">*</span>dist<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>xC<span class="token operator">+</span>r<span class="token operator">*</span>x<span class="token punctuation">,</span> yC<span class="token operator">+</span>r<span class="token operator">*</span>y<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Finally we removed all the ( p ), namely stochasticity, from time complexity and space complexity. Dragon is defeated!</p>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mathematics </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
